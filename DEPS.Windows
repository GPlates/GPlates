Dependencies for Windows

Table of Contents

 1. Introduction
 2. Environment variables
 3. Program and library dependencies

Introduction

This page lists the program and library dependencies which need to be satisfied
to be able to build GPlates from source on Windows.

Environment variables

Instructions below may direct you to modify the PATH variable, to add
directories to the search path for executable files. (Note that the name of the
variable is not case sensitive, so it could be called Path instead.)

 * Windows XP:
     1. Click on the Start button.
     2. Right-click on My Computer and select Properties.
     3. On the Advanced tab, click on the Environment Variables button.
     4. If you edit the PATH variable in the User variables section, the change
        only affects your account. If you edit the PATH variable in the System
        variables section (assuming you have sufficient privileges to do so),
        the change will affect all users on the computer. Edit the variable in
        whichever section is most suitable. If the PATH variable does not exist,
        click the New button to add it. Separate paths with semicolons.
 * Windows Vista and Windows 7 and above (if you have administrator access and you wish
   to change the PATH variable for all users):
     1. Click on the Start button.
     2. Right-click on Computer and select Properties.
     3. Click on the Advanced system settings link in the left-hand Tasks panel.
     4. If prompted, enter an administrator password for UAC.
     5. On the Advanced tab, click on the Environment Variables button.
     6. Edit the PATH variable in the System variables section. If the PATH
        variable does not exist, click the New button to add it. Separate paths
        with semicolons.
 * Windows Vista and Windows 7 and above (if you do not have administrator access or you
   wish to change the PATH variable only for your account):
     1. Click on the Start button.
     2. Click your account's picture at the very top of the second column.
     3. Click on the Change my environment variables link in the left-hand Tasks
        panel.
     4. Edit the PATH variable in the User variables section. If the PATH
        variable does not exist, click the New button to add it. Separate paths
        with semicolons.

Program and library dependencies

The following libraries and binaries are required to build GPlates. If you
cannot use, or you cannot obtain, the exact same version as listed, you should
try to use a version with the same major and minor build numbers (i.e. for a
version number of x.y.z, you should aim to keep x and y the same). However,
GPlates should compile and function correctly with newer versions of these
dependencies.

Microsoft Visual Studio

  1. Install Visual Studio Community 2015 (14.0) or newer.
  2. Use the same compiler (major version) to build all library dependencies (listed below).
     * This is needed for ABI compatibility during the final link stage (when linking GPlates).
     * However some C libraries are suggested below to be installed as pre-compiled such as Python, NetCDF and GLEW.
       Some of these are likely to have been compiled with different (older) compilers (such as NetCDF).
       This is probably OK since these libraries use the "C" language (or have a "C" interface) which tends to
       have better ABI compatibility support (than C++). Ideally these libraries should also be compiled from source.
     * Note that it is OK to build all dependency libraries with VS2015 and then compile/link GPlates with VS2017.
       See https://docs.microsoft.com/en-us/cpp/porting/binary-compat-2015-2017?view=vs-2017
     * For developers, a good article on ABI compatibility can be found here:
       https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B
  3. For any activities requiring the command line, remember to use the
     "Developer Command Prompt for VS201X" shortcut available in the Windows "Start" menu.
     This starts a command prompt and sets up environment variables, allowing use of VC command line 
     applications (such as the compiler, linker, make and build tools).
     Note that this is 32-bit. For 64-bit you'll need a command prompt with a
     64-bit Visual Studio toolset enabled. To do this:
     * Start a standard command prompt, and run the following in it (keeping the double quotes intact):
       "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
       Then you can compile the libraries dependencies from within this command prompt.
  4. Once all library dependencies have been built, be sure to build GPlates as 64-bit (see BUILD.Windows).
     To do this:
     * In the CMake GUI select a 64-bit version of a Visual Studio generator such as "Visual Studio 14 2015 Win64".
       Alternatively, when using the cmake command-line, use the "-A" option such as "cmake -G "Visual Studio 14 2015" -A x64".

CMake

  1. Get and install the latest CMake (at least 3.5) from: http://www.cmake.org/

Qt

  1. Download the latest Qt5 opensource installer exe from: https://download.qt.io/archive/qt/
     For example, for Qt 5.14.2 this is https://download.qt.io/archive/qt/5.14/5.14.2/qt-opensource-windows-x86-5.14.2.exe
     Note that you now need a Qt account to use the binary installer (it will ask you to sign in or create a new account).
     And after Qt 5.14 you will need to use the online installer (offline for commercial license only).
     Alternatively you can compile from source - see https://doc.qt.io/qt-5/windows-building.html
  2. Select the pre-built components appropriate for you compiler.
     For example, select "MSVC 2015 64-bit" when compiling 64-bit using Visual Studio 2015.
  3. Select the GPL license.
  4. Add the base of your selected pre-built components directory to the CMAKE_PREFIX_PATH environment variable.
     For example, "C:\SDK\qt\qt-5.14.2\5.14.2\msvc2015_64".
  5. Add the Qt \bin directory (associated with your selected pre-built components) to the PATH environment variable.
     For example, "C:\SDK\qt\qt-5.14.2\5.14.2\msvc2015_64\bin".
     Note you may need to insert near front of PATH to prioritise over other installed software containing Qt5 DLLs.

Qwt

  1. Get the qwt source code zip package from http://sourceforge.net/projects/qwt/files/qwt/6.1.4/
  2. Extract the files in the package to your preferred location (e.g. C:\SDK\qwt)
  3. Start a Visual Studio command prompt (see above for 32-bit versus 64-bit) and
     navigate to your qwt location (e.g. C:\SDK\qwt\qwt-6.1.4 )
  4. At the command prompt, run:
       qmake qwt.pro
       nmake
     You should now have a "lib" folder containing .dll and .lib files.
  5. Edit the QWT_INSTALL_PREFIX variable in "qwtconfig.pri" to refer to your qwt location (e.g. C:\SDK\qwt\qwt-6.1.4 )
     You should only need to change QWT_INSTALL_PREFIX inside the 'win32 { }' block.
  6. Then at the command prompt, run:
       nmake install
  7. Add the Qwt root directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\qwt\qwt-6.1.4 ).
  8. Add the Qwt library location to your PATH environment variable (eg, C:\SDK\qwt\qwt-6.1.4\lib ).

GLEW
  1. Download and extract glew-2.1.0-win32.zip from: http://glew.sourceforge.net/
  2. Add the GLEW root directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\glew\glew-2.1.0 )
  3. Add the GLEW \Bin\Release\Win32 directory to the PATH environment variable for a 32-bit build, or
     add the GLEW \Bin\Release\x64 directory to the PATH environment variable for a 64-bit build.

Python
  1. Download, and install, the latest Python 3 Windows MSI installer (eg, 'http://www.python.org/downloads/').
     * Download the 32-bit installer for a 32-bit build (eg, 'python-3.7.7.exe'), or
       download the 64-bit installer for a 64-bit build (eg, 'python-3.7.7.amd64.exe).
     * Note that GPlates (and pygplates) also support Python 2 (but it has reached end of life, so Python 3 is recommended).
  2. Add the root Python directory, and 'DLLs/' and 'Scripts/' sub-directories, to the PATH environment variable.
     * Note: Make sure you add these higher in the PATH than "%USERPROFILE%\AppData\Local\Microsoft\WindowsApps" because
             Windows 10 May 2019 update now places a redirect python.exe in there that takes you straight to the Microsoft Store.
  3. Add the root Python directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\python\Python-3.7.7 )
     * CMAKE_PREFIX_PATH prevents GPlates finding a different Python installation (such as inside ArcGIS).

Boost

  1. Download and extract the source code for boost from http://www.boost.org/users/download/
     NOTE: You can no longer get pre-compiled binaries from http://www.boostpro.com/download
           However there are now binaries available at https://sourceforge.net/projects/boost/files/boost-binaries/
  2. Follow the instructions in the Getting Started guide (eg, at http://www.boost.org/doc/libs/1_69_0/more/getting_started/windows.html )
     Essentially (for Visual Studio 2015) this involves:
     * Starting a Visual Studio command prompt (see above for 32-bit versus 64-bit).
     * Changing to the boost source code directory (eg, "cd C:\SDK\boost\boost_1_69_0").
     * Running '.\bootstrap.bat' (to create the BoostBuild tools).
     * Running '.\b2 -j%NUMBER_OF_PROCESSORS% toolset=msvc-14.0 address-model=32 architecture=x86 link=shared threading=multi runtime-link=shared install --prefix=%CD%'
       where 'msvc-14.0' corresponds to Visual Studio 2015. Note, use 'address-model=64' for a 64-bit build.
       This installs the headers and the 'shared' libraries (DLLs and their associated ".lib"s).
       These 'shared' libraries are used by GPlates.
     * Running '.\b2 -j%NUMBER_OF_PROCESSORS% toolset=msvc-14.0 address-model=32 architecture=x86 link=static threading=multi runtime-link=shared stage --stagedir=%CD%'
       where 'msvc-14.0' corresponds to Visual Studio 2015. Note, use 'address-model=64' for a 64-bit build.
       This installs only the 'static' library versions (library files with the 'lib' prefix) - note the 'stage' target (instead of 'install').
       These 'static' libraries are used by CGAL.
  2. Add the boost root directory to the BOOST_ROOT environment variable (eg, C:\SDK\boost\boost_1_69).
  3. Add the boost 'lib' directory to the PATH environment variable (eg, C:\SDK\boost\boost_1_69\lib).
     
     Note that if you upgrade your boost version you'll need to re-compile the CGAL library (since it uses boost thread).
     
     Note that the boost-python (sub)library will link against your python installation
     and, at runtime, will expect a DLL of that python version. For example, if you build boost with python version 3.7
     then, at runtime, the python DLL (version 3.7) should exist in the PATH.
     
     To get boost to find python at compile time you might also need to add something like...
        using python : 3.7 : C:\\SDK\\python\\Python-3.7.7 ;
     ...for example to "user-config.jam" in your home directory(see https://www.boost.org/doc/libs/1_69_0/libs/python/doc/html/building/configuring_boost_build.html )
     And if you're using both Python 2 and 3 (ie, compiling one GPlates/pyGPlates for Python 2 and one for Python 3) then you might have something like...
        using python : 2.7 : C:\\SDK\\python\\Python-2.7.18 ;
        using python : 3.7 : C:\\SDK\\python\\Python-3.7.7 ;
     ...and then add "python=2.7,3.7", for example, to your '.\b2 ...' command-line.
     
     You may get compile errors about '_snprintf' not being a member of 'std' when (later) compiling GPlates. This is typically due to some source code somewhere defining:
       #if defined(_MSC_VER)
           #define snprintf _snprintf
       #endif
     ...when it should be using "#if defined(_MSC_VER) && _MSC_VER < 1900" since Visual Studio 2015 now defines 'std::snprintf'.
     It's hard to find where this is happening (among the dependency library headers) so one (hacky) option is to edit "boost/system/detail/system_category_win32.hpp" as
       inline char const * unknown_message_win32( int ev, char * buffer, std::size_t len )
       {
           // Microsoft Visual Studio has std::snprint(), but some other code might have "#define snprintf _snprintf" for all _MSC_VER versions.
       #if defined(_MSC_VER) && !defined(snprintf)
           std::
       #endif
               snprintf( buffer, len, "Unknown error (%d)", ev );
           return buffer;
       }
     ...since this is the only location it seems to be happening currently.

SQLite3

    1. Download sqlite-amalgamation zip file from "https://www.sqlite.org/download.html".
    2. Compile the DLL:
       o "cl sqlite3.c -DSQLITE_ENABLE_RTREE -DSQLITE_API=__declspec(dllexport) -link -dll -out:sqlite3.dll -implib:sqlite3_i.lib"
       o From https://protyposis.net/blog/compiling-sqlite-as-dll-with-msvc/
    3. Compile the binary:
       o "cl shell.c sqlite3.c -Fesqlite3.exe"
    4. Add the directory to the PATH environment variable (eg, C:\SDK\sqlite3\sqlite-amalgamation-3290000).
       o It appears the binary is required by the Proj6 cmake build stage (otherwise it'll produce a cmake error).

Proj6

  1. Get Proj6 source code from https://proj.org/
  2. Read the README file and build Proj6.
     o This involves using cmake.
       For example, creating a 'build/' sub-directory inside your extracted proj6 source directory.
       Then running the CMake GUI and setting source and binary directories (eg, "C:\SDK\proj\proj-6.1.1" and "C:\SDK\proj\proj-6.1.1\build").
       Then clicking 'Configure' once and selecting a Visual Studio generator
       (such as "Visual Studio 14 2015" for 32-bit or "Visual Studio 14 2015 Win64" for 64-bit).
       Then changing the install location from "C:/OSGeo4W" to your Proj6 directory (eg, "C:/SDK/proj/proj-6.1.1"):
         By changing the CMAKE_INSTALL_PREFIX variable (in the CMake GUI).
         NOTE: Make sure to use forward slashes '/' here (not backward slashes '\') to avoid errors when compiling proj.
       Then clicking 'Configure' once more, and then 'Generate' to create a Visual Studio solution.
     o If cmake cannot find the location of sqlite3 then you'll need to either set it manually in the CMake GUI (after the first 'Configure' stage), or
       specify it on the cmake command-line as covered in the Proj6 README (using "-DSQLITE3_INCLUDE_DIR" and "-DSQLITE3_LIBRARY").
     o Open the "PROJ4" Visual Studio solution , select "Release" build and then build the "INSTALL" project.
  3. Add the Proj6 root directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\proj\proj-6.1.1 ).
  4. Add the 'bin' directory to the PATH environment variable so the PROJ DLL, if there is one,
     can be found at run-time (eg, "C:\SDK\proj\proj-6.1.1\bin").

NetCDF

    1. Download the Windows NetCDF-4 library pre-compiled library/DLL (32-bit or 64-bit)
       from the 'download' link at "https://www.unidata.ucar.edu/software/netcdf/".
       o Extract it to a location on your hard drive (eg, "C:\SDK\netcdf\netcdf-4.7.0").
    2. Also add the NetCDF 'bin' directory to the PATH environment variable (so the NetCDF DLL can be found at run-time).
       o Eg, Add "C:\SDK\netcdf\netcdf-4.7.0\bin" to the PATH environment variable.
    3. This library will get compiled into GDAL (see GDAL below).

GDAL

    1. Get GDAL 3.x source code from http://trac.osgeo.org/gdal/wiki/DownloadSource
    2. Extract to a location on your hard drive (eg, "C:\SDK\gdal\gdal-3.1.0").
    3. Edit the "nmake.opt" file under the section labelled "# Uncomment the following to enable NetCDF format.",
       o Uncomment the following four lines and specify the location of the NetCDF library (see NetCDF above).
       o For example, after editing, you might have something like:
         NETCDF_PLUGIN = NO
         NETCDF_SETTING=yes
         NETCDF_LIB=C:\SDK\netcdf\netcdf-4.7.0\lib\netcdf.lib
         NETCDF_INC_DIR=C:\SDK\netcdf\netcdf-4.7.0\include
    4. Edit the "nmake.opt" by uncommenting '#NETCDF_HAS_NC4 = yes':
       o This enables NetCDF version 4 support (which uses HDF5).
       o For example, after editing, you should have:
         NETCDF_HAS_NC4 = yes
    5. Edit the "nmake.opt" file under the section labelled "# PROJ stuff (required dependency: PROJ >= 6)",
       o Uncomment the following two lines and specify the location of the PROJ6 library (see PROJ6 above).
       o For example, after editing, you might have something like:
         PROJ_INCLUDE = -IC:\SDK\proj\proj-6.1.1\include
         PROJ_LIBRARY = C:\SDK\proj\proj-6.1.1\lib\proj_6_1.lib
    5. Edit the "nmake.opt" file under the section labelled 
       o Uncomment the following two lines and specify the location of the SQLite3 library (see SQLite3 above).
       o For example, after editing, you might have something like:
         SQLITE_INC=-Ic:\SDK\sqlite3\sqlite-amalgamation-3290000
         SQLITE_LIB=c:\SDK\sqlite3\sqlite-amalgamation-3290000\sqlite3_i.lib
    6. Uncomment "#WIN64=YES" in "nmake.opt" if compiling a 64-bit build.
    7. Generate a new Visual Studio solution file by following instructions at https://trac.osgeo.org/gdal/wiki/GeneratingVisualStudioProject
       o For example, run "generate_vcxproj.bat 14.0 32 gdal_vs2015" for 32-bit or
         "generate_vcxproj.bat 14.0 64 gdal_vs2015" for 64-bit, if you are using Visual Studio 2015.
    8. Use Visual Studio to build GDAL.
       o For example, by opening the 'gdal_vs2015.vcxproj' project file with Visual Studio 2015.
       o Selecting 'Release' as the build type, and building the project.
       o NOTE: It seems that selecting 'Debug' as the build type does not generate a debug build.
         Instead you'll need to build via the command-line (see below) using the 'DEBUG=1' option.
    9. Alternatively, instead of building with a solution file, you can bring up a Visual Studio command prompt (32-bit or 64-bit) and type:
         nmake /f makefile.vc MSVC_VER=1900
       o If 'MSVC_VER' is not specified it appears (in "nmake.opt") to default to 1900 (Visual Studio 2015) for GDAL 2.3.
       o If you want a debug build then add 'DEBUG=1'.
         NOTE: It appears both debug and release builds use the same filenames (so they just overwrite each other).
               Might need to pick one or the other.
    10. Set the 'GDAL_DIR' environment variable to the root path of GDAL (eg, "C:\SDK\gdal\gdal-3.1.0").
    11. Also add the root path of GDAL to the PATH environment variable (so the GDAL DLL can be found at run-time).
    
    NOTE that GDAL 2.3 (and above) use C++11 features which requires Visual Studio 2015 (or above).
  
CGAL

  1. Get and install the latest CGAL (eg, 4.13.1) source code from http://www.cgal.org/
     * Download and run 'CGAL-4.13.1-Setup.exe'.
     * Under 'Choose Components' untick everything except:
         * 'GMP and MPFR precompiled libs' (note that 'Main CGAL' cannot be unticked).
     * Choose '32-bits' or '64-bits'.
     * Select the install location (don't use spaces in the path) - for example, 'C:/SDK/cgal/CGAL-4.13.1'.
         * In particular, do not install under Program Files on Windows Vista and
           above because you will likely run into permissions issues later.
     * Tick 'CGAL_DIR' environment variable - note: this is necessary for GPlates to be able to find CGAL.
     * Tick 'Add CGAL/auxiliary/gmp/lib to PATH' (eg, D:\SDK\cgal\CGAL-4.13.1\auxiliary\gmp\lib).
  2. Prepare CGAL for building by running 'cmake-gui.exe' (this requires CMAKE to have already been installed):
     * NOTE: Make sure you run 'cmake-gui.exe' as administrator (right-click and select 'Run as administrator').
     * Specify the CGAL installation location as the source and build directories.
     * Click 'Configure' once and select a Visual Studio generator
       (such as "Visual Studio 14 2015" for 32-bit or "Visual Studio 14 2015 Win64" for 64-bit).
        * If an error dialog pops up and there's red text that complains it cannot find the boost library
          boost_thread then (if it's not a path issue) it could be that you don't have the 'static' library versions
          of the boost libraries (the ones with the 'lib' prefix in the library filenames - see Boost above).
     * Untick all 'WITH_*' options except:
         * WITH_CGAL_Core,
         * WITH_GMP and
         * WITH_MPFR.
     * Change 'CMAKE_INSTALL_PREFIX' to the installation location (eg, 'C:/SDK/cgal/CGAL-4.13.1').
       NOTE: Make sure to use forward slashes '/' here (not backward slashes '\') to avoid errors when compiling CGAL.
     * Click the 'Configure' button again.
     * Click the 'Generate' button.
     * If this is successful then a Visual Studio solution file 'CGAL.sln'.
  3. Build CGAL:
     * Open the generated Visual Studio solution file 'CGAL.sln'.
     * Select the 'Release' build type.
     * (GPlates developers will also want to build 'Debug', etc so that similar builds in
       GPlates can find the CGAL library of the correct build type).
     * Build the 'INSTALL' project.
  4. Add the CGAL \bin directory to the PATH environment variable (eg, D:\SDK\cgal\CGAL-4.13.1\bin).
  When GPlates is built it should find CGAL via the "CGAL_DIR" environment variable.
  You may get a compile error in 'include/CGAL/Dimension.h' when (later) compiling GPlates.
  You can workaround this by replacing:
    const int UNKNOWN_DIMENSION=std::numeric_limits<int>::max();
  ...with...
    const int UNKNOWN_DIMENSION=(std::numeric_limits<int>::max)();
  ...in 'include/CGAL/Dimension.h'
    
    NOTE that CGAL 5 (and above) use C++14 features which requires Visual Studio 2015 (or above).

zlib

  1. Download the source code for version 1.2.11 http://zlib.net/
  2. Extract to a location on your hard drive (eg, "C:\SDK\zlib\zlib-1.2.11").
  2. Open the appropriate Visual Studio solution in the 'contrib/vstudio/' directory.
     For example, for Visual Studio 2015 open 'contrib/vstudio/vc14/zlibvc.sln'.
  3. Build zlib:
     * Select the 'Release' build type. (GPlates developers may also want to build 'Debug').
     * Select configuration type 'x64' for a 64-bit build or 'Win32' for a 32-bit build.
     * Build the 'zlibvc' project.
  4. Copy the following built files to the root zlib directory (eg, "C:\SDK\zlib\zlib-1.2.11").
     For a 64-bit build these files are copied from the 'contrib\vstudio\vc14\x64\ZlibDllRelease\' directory.
     * zlibwapi.dll
     * zlibwapi.lib
     * zlibwapi.exp
     * zlibwapi.pdb
  5. Add the zlib root directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\zlib\zlib-1.2.11 ).
  6. Add the zlib root directory to the PATH environment variable (eg, "C:\SDK\zlib\zlib-1.2.11") so the DLL can be found.

Subversion (optional, but recommended for developers)

  1. Get the command-line client from http://www.collab.net/downloads/subversion/
     Either the server and client bundle or the client-only bundle will suffice.
     Even if you have installed TortoiseSVN, this needs to be installed separately
     to provide the `svn` and `svnversion` command line tools.
      * Alternatively, Cygwin (http://www.cygwin.com/) contains Subversion.
  2. Add the location of the `svn` executable to the PATH environment variable
     (see above).
  If Subversion is not installed, the build number and branch name will not be
  automatically inserted into the About dialog box by the build process.

Graphviz (required for documentation, but not required to build GPlates)

  1. Get and install the latest version of Graphviz from http://www.graphviz.org/
  2. Add the location of the Graphviz main executable to the PATH environment
     variable (see above). This must be added *after* the FWTools \bin folder
     (which was added in a previous step).

Doxygen (required for documentation, but not required to build GPlates)

  1. Get and install the latest version of Doxygen from
     http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
      * Alternatively, Cygwin (http://www.cygwin.com/) contains Doxygen.
  2. Add the location of the Doxygen main executable to the PATH environment
     variable (see above).
