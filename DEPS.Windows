Dependencies for Windows

Table of Contents

 1. Introduction
 2. Environment variables
 3. Program and library dependencies

Introduction

This page lists the program and library dependencies which need to be satisfied
to be able to build GPlates from source on Windows.

Environment variables

Instructions below may direct you to modify the PATH variable, to add
directories to the search path for executable files. (Note that the name of the
variable is not case sensitive, so it could be called Path instead.)

 * Windows XP:
     1. Click on the Start button.
     2. Right-click on My Computer and select Properties.
     3. On the Advanced tab, click on the Environment Variables button.
     4. If you edit the PATH variable in the User variables section, the change
        only affects your account. If you edit the PATH variable in the System
        variables section (assuming you have sufficient privileges to do so),
        the change will affect all users on the computer. Edit the variable in
        whichever section is most suitable. If the PATH variable does not exist,
        click the New button to add it. Separate paths with semicolons.
 * Windows Vista and Windows 7 and above (if you have administrator access and you wish
   to change the PATH variable for all users):
     1. Click on the Start button.
     2. Right-click on Computer and select Properties.
     3. Click on the Advanced system settings link in the left-hand Tasks panel.
     4. If prompted, enter an administrator password for UAC.
     5. On the Advanced tab, click on the Environment Variables button.
     6. Edit the PATH variable in the System variables section. If the PATH
        variable does not exist, click the New button to add it. Separate paths
        with semicolons.
 * Windows Vista and Windows 7 and above (if you do not have administrator access or you
   wish to change the PATH variable only for your account):
     1. Click on the Start button.
     2. Click your account's picture at the very top of the second column.
     3. Click on the Change my environment variables link in the left-hand Tasks
        panel.
     4. Edit the PATH variable in the User variables section. If the PATH
        variable does not exist, click the New button to add it. Separate paths
        with semicolons.

Program and library dependencies

The following libraries and binaries are required to build GPlates. If you
cannot use, or you cannot obtain, the exact same version as listed, you should
try to use a version with the same major and minor build numbers (i.e. for a
version number of x.y.z, you should aim to keep x and y the same). However,
GPlates should compile and function correctly with newer versions of these
dependencies.

Microsoft Visual Studio

  1. Install Visual Studio Community 2015 (14.0) or newer.
  2. Use the same compiler (major version) to build all library dependencies (listed below).
     * This is needed for ABI compatibility during the final link stage (when linking GPlates).
     * However some C libraries are suggested below to be installed as pre-compiled such as Python, NetCDF and GLEW.
       Some of these are likely to have been compiled with different (older) compilers (such as NetCDF).
       This is probably OK since these libraries use the "C" language (or have a "C" interface) which tends to
       have better ABI compatibility support (than C++). Ideally these libraries should also be compiled from source.
     * Note that it is OK to build all dependency libraries with VS2015 and then compile/link GPlates with VS2017 or VS2019.
       See https://docs.microsoft.com/en-us/cpp/porting/binary-compat-2015-2017?view=vs-2017
     * For developers, a good article on ABI compatibility can be found here:
       https://community.kde.org/Policies/Binary_Compatibility_Issues_With_C%2B%2B
  3. For any activities requiring the command line, remember to use the
     "Developer Command Prompt for VS201X" shortcut available in the Windows "Start" menu.
     This starts a command prompt and sets up environment variables, allowing use of VC command line 
     applications (such as the compiler, linker, make and build tools).
     Note that this is 32-bit. For 64-bit you'll need a command prompt with a
     64-bit Visual Studio toolset enabled. To do this:
     * Start a standard command prompt, and run the following in it (keeping the double quotes intact):
       "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
       Then you can compile the libraries dependencies from within this command prompt.
  4. Typically each dependency library has its own build instructions (covered in the rest of this document below).
     However an interesting alternative, that hasn't been tested with GPlates, is to use the Vcpkg ( https://vcpkg.readthedocs.io ) package manager by Microsoft.
     Here you can specify a particular MSVC compiler to use by adding a triplet file.
     For example, you could add a file named "x64-windows-v140.cmake" to the "<base-vcpkg-dir>/triplets/community" directory for
     Visual Studio 2015 (ie, version 14.0) 64-bit containing the following:
         set(VCPKG_TARGET_ARCHITECTURE x64)
         set(VCPKG_CRT_LINKAGE dynamic)
         set(VCPKG_LIBRARY_LINKAGE dynamic)
         set(VCPKG_PLATFORM_TOOLSET v140)
     ...and then install tiff (for example, if you're enabling TIFF support in Proj) by typing (in a command prompt with 64-bit Visual Studio toolset enabled)...
         vcpkg install tiff:x64-windows-v140
     ...which downloads, builds and installs to "vcpkg/installed/x64-windows-v140", and so you can then set these Proj variables so that tiff can be found:
         TIFF_INCLUDE_DIR="<base-vcpkg-dir>/installed/x64-windows-v140/include"
         TIFF_LIBRARY="<base-vcpkg-dir>/installed/x64-windows-v140/lib/tiff.lib"
  5. Once all library dependencies have been built, be sure to build GPlates as 64-bit (see BUILD.Windows).
     To do this:
     * In the CMake GUI select a 64-bit version of a Visual Studio generator such as "Visual Studio 14 2015 Win64".
       Alternatively, when using the cmake command-line, use the "-A" option such as "cmake -G "Visual Studio 14 2015" -A x64".

CMake

  1. Get and install the latest CMake (at least 3.5) from: http://www.cmake.org/

Qt

  1. Download the latest Qt opensource online installer from: https://www.qt.io/download-open-source
     Run the online installer exe:
     - It will ask for the username and password of your Qt account (it will ask you to sign in or create a new account).
     - Accept the obligations of using Qt Open Source (and specify whether you are an individual or a company).
     - Select 'Custom' installation (we want Qt5, not Qt6 since we don't yet support it).
     - Under 'Qt 5.15.2' select the compiler you are using.
       For example, select "MSVC 2015 64-bit" when compiling 64-bit using Visual Studio 2015.
     - Accept the license.
     - Select your Start Menu shortcut.
     - Finish the installation of the pre-built components.
  2. Alternatively you can download the latest Qt5 opensource *offline* installer from: https://download.qt.io/archive/qt/
     However, the latest will be Qt 5.14 (not Qt 5.15) since offline installers are no longer supported by Qt (for non-commercial).
     This is https://download.qt.io/archive/qt/5.14/5.14.2/qt-opensource-windows-x86-5.14.2.exe
     Note that you now need a Qt account to use the installer (it will ask you to sign in or create a new account).
     Run the offline installer exe:
     - Select the pre-built components appropriate for your compiler.
       For example, select "MSVC 2015 64-bit" when compiling 64-bit using Visual Studio 2015.
     - Select the GPL license.
     - Finish the installation of the pre-built components.
  3. Alternatively you can compile from source - see https://doc.qt.io/qt-5/windows-building.html
  4. Add the base of your selected pre-built components directory (assuming you chose step 1 or 2) to the CMAKE_PREFIX_PATH environment variable.
     For example, "C:\SDK\qt\qt-5.15.2\5.15.2\msvc2015_64".
  5. Add the Qt \bin directory (associated with your selected pre-built components) to the PATH environment variable.
     For example, "C:\SDK\qt\qt-5.15.2\5.15.2\msvc2015_64\bin".
     Note you may need to insert near front of PATH to prioritise over other installed software containing Qt5 DLLs
     otherwise GPlates might not start complaining that some symbol in one of the Qt5 DLLs cannot be found.

Qwt

  1. Get the qwt source code zip package from http://sourceforge.net/projects/qwt/files/qwt/6.1.4/
  2. Extract the files in the package to your preferred location (e.g. C:\SDK\qwt)
  3. Start a Visual Studio command prompt (see above for 32-bit versus 64-bit) and
     navigate to your qwt location (e.g. C:\SDK\qwt\qwt-6.1.4 )
  4. Edit the QWT_INSTALL_PREFIX variable in "qwtconfig.pri" to refer to a qwt *install* location that
     is different than the qwt location, such as a sub-directory (e.g. C:\SDK\qwt\qwt-6.1.4\msvc2015_64 ),
     so that 'nmake install' below does not fail (trying to copy the same file on top of itself).
     You should only need to change QWT_INSTALL_PREFIX inside the 'win32 { }' block.
     Note: Qwt should find the Qt installation that was installed in the above step (using qmake found via PATH).
  5. At the command prompt, run:
       qmake qwt.pro
       nmake
  6. Then at the command prompt, run:
       nmake install
  7. Add the Qwt *install* directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\qwt\qwt-6.1.4\msvc2015_64 ).
  8. Add the Qwt library location (inside the *install* directory) to your PATH environment variable (eg, C:\SDK\qwt\qwt-6.1.4\lib\msvc2015_64 ).

GLEW
  1. Download and extract glew-2.1.0-win32.zip from: http://glew.sourceforge.net/
  2. Add the GLEW root directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\glew\glew-2.1.0 )
  3. Add the GLEW \Bin\Release\Win32 directory to the PATH environment variable for a 32-bit build, or
     add the GLEW \Bin\Release\x64 directory to the PATH environment variable for a 64-bit build.

Python
  1. Download, and install, the latest Python 3 Windows MSI installer (eg, 'http://www.python.org/downloads/').
     * Download the 32-bit installer for a 32-bit build (eg, 'python-3.7.9.exe'), or
       download the 64-bit installer for a 64-bit build (eg, 'python-3.7.9.amd64.exe).
     * Note that GPlates (and pygplates) also support Python 2 (but it has reached end of life, so Python 3 is recommended).
  2. Add the root Python directory, and 'Scripts/' sub-directories, to the PATH environment variable.
     * Note: Make sure you add these higher in the PATH than "%USERPROFILE%\AppData\Local\Microsoft\WindowsApps" because
             Windows 10 May 2019 update now places a redirect python.exe in there that takes you straight to the Microsoft Store.
  3. Add the root Python directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\python\Python-3.7.9 )
     * CMAKE_PREFIX_PATH prevents GPlates finding a different Python installation (such as inside ArcGIS).

Boost

  1. Download and extract the source code for boost from http://www.boost.org/users/download/
     NOTE: You can no longer get pre-compiled binaries from http://www.boostpro.com/download
           However there are now binaries available at https://sourceforge.net/projects/boost/files/boost-binaries/
  2. Follow the instructions in the Getting Started guide (eg, at http://www.boost.org/doc/libs/1_69_0/more/getting_started/windows.html )
     Essentially (for Visual Studio 2015) this involves:
     * Starting a Visual Studio command prompt (see above for 32-bit versus 64-bit).
     * Changing to the boost source code directory (eg, "cd C:\SDK\boost\boost_1_69_0").
     * Running '.\bootstrap.bat' (to create the BoostBuild tools).
     * Running '.\b2 -j%NUMBER_OF_PROCESSORS% toolset=msvc-14.0 address-model=64 architecture=x86 link=shared threading=multi runtime-link=shared install --prefix=%CD%'
       where 'msvc-14.0' corresponds to Visual Studio 2015. Note that this is for a 64-bit build, for 32-bit use 'address-model=32' instead.
       This installs the headers and the 'shared' libraries (DLLs and their associated ".lib"s).
       These 'shared' libraries are used by GPlates.
     * Running '.\b2 -j%NUMBER_OF_PROCESSORS% toolset=msvc-14.0 address-model=64 architecture=x86 link=static threading=multi runtime-link=shared stage --stagedir=%CD%'
       where 'msvc-14.0' corresponds to Visual Studio 2015. Note that this is for a 64-bit build, for 32-bit use 'address-model=32' instead.
       This installs only the 'static' library versions (library files with the 'lib' prefix) - note the 'stage' target (instead of 'install').
       These 'static' libraries are used by CGAL.
  2. Add the boost root directory to the BOOST_ROOT environment variable (eg, C:\SDK\boost\boost_1_69).
  3. Add the boost 'lib' directory to the PATH environment variable (eg, C:\SDK\boost\boost_1_69\lib).
     
     Note that if you upgrade your boost version you'll need to re-compile the CGAL library (since it uses boost thread).
     
     Note that the boost-python (sub)library will link against your python installation
     and, at runtime, will expect a DLL of that python version. For example, if you build boost with python version 3.7
     then, at runtime, the python DLL (version 3.7) should exist in the PATH.
     
     To get boost to find python at compile time you might also need to add something like...
        using python : 3.7 : C:\\SDK\\python\\Python-3.7.9 ;
     ...for example to "user-config.jam" in your home directory(see https://www.boost.org/doc/libs/1_69_0/libs/python/doc/html/building/configuring_boost_build.html )
     And if you're using both Python 2 and 3 (ie, compiling one GPlates/pyGPlates for Python 2 and one for Python 3) then you might have something like...
        using python : 2.7 : C:\\SDK\\python\\Python-2.7.18 ;
        using python : 3.7 : C:\\SDK\\python\\Python-3.7.9 ;
     ...and then add "python=2.7,3.7", for example, to your '.\b2 ...' command-line.

SQLite3

    1. Download sqlite-amalgamation zip file from "https://www.sqlite.org/download.html".
    2. Compile the DLL:
       o "cl sqlite3.c -DSQLITE_ENABLE_RTREE -DSQLITE_API=__declspec(dllexport) -link -dll -out:sqlite3.dll -implib:sqlite3_i.lib"
       o From https://protyposis.net/blog/compiling-sqlite-as-dll-with-msvc/
    3. Compile the binary:
       o "cl shell.c sqlite3.c -Fesqlite3.exe"
    4. Add the directory to the PATH environment variable (eg, C:\SDK\sqlite3\sqlite-amalgamation-3290000).
       o It appears the binary is required by the Proj cmake build stage (otherwise it'll produce a cmake error).

Proj

  1. Get the Proj source code from https://proj.org/
  2. Read the instructions for compiling and installing Proj using CMake (https://proj.org/install.html#cmake).
     For Proj8 this involves:
     o Create a 'build' sub-directory inside your extracted proj source directory (eg, "C:\SDK\proj\proj-8.0.1\build\") and step into it:
         mkdir build
         cd build
     o Configure for building:
       Here we use Visual Studio 2015 ('-G "Visual Studio 14 2015"') in 64-bit mode ('-A x64').
       We set the Proj install path using '-D CMAKE_INSTALL_PREFIX ...' a directory that is different than the root of the extracted source tree.
       For example, "C:\SDK\proj\proj-8.0.1\msvc2015_64". This ensures GPlates will find the correct Proj CMake config files (the ones created when installing Proj).
       We disable TIFF and CURL support. If they are enabled then the relevant '-D' variables should specify their include/library locations.
       We specify the SQLite3 include/library locations. Note that if SQLite3 is already in the CMAKE_PREFIX_PATH or PATH environment variables then this is not necessary.
       We disable building of projsync since it requires CURL and we don't need to download proj data (we only need 'proj.db' which is included without downloading).
       We disable building of the testing tree since we're not going to test Proj.
       And the final '..' tells CMake the root location of the source tree (ie, parent directory of 'build').
         cmake -G "Visual Studio 14 2015" -A x64 \
               -D CMAKE_INSTALL_PREFIX:PATH=C:\SDK\proj\proj-8.0.1\msvc2015_64 \
               -D ENABLE_CURL:BOOL=OFF \
               -D ENABLE_TIFF:BOOL=OFF \
               -D SQLITE3_INCLUDE_DIR:PATH=C:\SDK\sqlite3\sqlite-amalgamation-3290000 \
               -D SQLITE3_LIBRARY:FILEPATH=C:\SDK\sqlite3\sqlite-amalgamation-3290000\sqlite3_i.lib \
               -D BUILD_PROJSYNC:BOOL=OFF \
               -D BUILD_TESTING:BOOL=OFF \
               ..
     o Build Proj (as a release build):
         cmake --build . --config Release
     o Install Proj (into the CMAKE_INSTALL_PREFIX location specified above):
         cmake --build . --config Release --target install
  3. Add the *install* 'bin' directory to the PATH environment variable (eg, "C:\SDK\proj\proj-8.0.1\msvc2015_64\bin").
     This is so the 'projinfo' executable can be found (currenlty only used when GPlates/pyGPlates installed/packaged as a standalone bundle).
     Note that by default a static (instead of shared DLL) Proj library is built, so PATH is not actually needed to find a Proj DLL.
  4. Add the Proj *install* directory (see CMAKE_INSTALL_PREFIX above) to the CMAKE_PREFIX_PATH environment variable (eg, "C:\SDK\proj\proj-8.0.1\msvc2015_64").
     This enables CMake to find Proj when configuring GPlates (see BUILD.Windows).
     Note that this is not strictly necessary since CMake can find the Proj install prefix using the PATH environment variable (CMake strips off 'bin').

NetCDF

    1. Download the Windows NetCDF-4 library pre-compiled library/DLL (32-bit or 64-bit)
       from the 'download' link at "https://www.unidata.ucar.edu/software/netcdf/".
       o Extract it to a location on your hard drive (eg, "C:\SDK\netcdf\netcdf-4.7.4").
    2. Also add the NetCDF 'bin' directory to the PATH environment variable (so the NetCDF DLL can be found at run-time).
       o Eg, Add "C:\SDK\netcdf\netcdf-4.7.4\bin" to the PATH environment variable.
    3. This library will get compiled into GDAL (see GDAL below).

GDAL

    1. Get GDAL 3.x source code from https://github.com/OSGeo/gdal/releases
    2. Extract to a location on your hard drive (eg, "C:\SDK\gdal\gdal-3.3.0").
       Note that the following build instructions are detailed at https://trac.osgeo.org/gdal/wiki/BuildingOnWindows
    3. Edit the "nmake.opt" file under the section labelled "# Uncomment the following to enable NetCDF format.",
       o Uncomment the following four lines and specify the location of the NetCDF library (see NetCDF above).
       o For example, after editing, you might have something like:
         NETCDF_PLUGIN = NO
         NETCDF_SETTING=yes
         NETCDF_LIB=C:\SDK\netcdf\netcdf-4.7.4\lib\netcdf.lib
         NETCDF_INC_DIR=C:\SDK\netcdf\netcdf-4.7.4\include
    4. Edit the "nmake.opt" by uncommenting '#NETCDF_HAS_NC4 = yes':
       o This enables NetCDF version 4 support (which uses HDF5).
       o For example, after editing, you should have:
         NETCDF_HAS_NC4 = yes
    5. Edit the "nmake.opt" file under the section labelled "# PROJ stuff (required dependency: PROJ >= 6)",
       o Uncomment the following two lines and specify the location of the PROJ library (see PROJ above).
       o For example, after editing, you might have something like:
         PROJ_INCLUDE = -IC:\SDK\proj\proj-8.0.1\msvc2015_64\include
         PROJ_LIBRARY = C:\SDK\proj\proj-8.0.1\msvc2015_64\lib\proj.lib
    5. Edit the "nmake.opt" file under the section labelled "SQLite Libraries",
       o Uncomment the following two lines and specify the location of the SQLite3 library (see SQLite3 above).
       o For example, after editing, you might have something like:
         SQLITE_INC=-Ic:\SDK\sqlite3\sqlite-amalgamation-3290000
         SQLITE_LIB=c:\SDK\sqlite3\sqlite-amalgamation-3290000\sqlite3_i.lib
         Note that we're not using the spatialite extension to SQLite which would require installing the spatialite amalgamation
         (instead the SQLite3 amalgamation) and also specifying the '-DHAVE_SPATIALITE' and '-DSPATIALITE_AMALGAMATION' flags in 'SQLITE_INC'.
    6. Start a Visual Studio command prompt (32-bit or 64-bit).
       Run 'nmake /f makefile.vc' with options specifying compiler, 32 or 64 bit and install prefix.
       For example, to compile using Visual Studio 2015 as 64-bit and install into the "msvc2015_64" sub-directory of source code root, type:
         nmake /f makefile.vc MSVC_VER=1900 WIN64=1 GDAL_HOME=C:\SDK\gdal\gdal-3.3.0\msvc2015_64 devinstall
       o If 'MSVC_VER' is not specified it appears (in "nmake.opt") to default to 1900 (Visual Studio 2015). At least for GDAL 2.3 (and still there for 3.3).
       o 'WIN64=1' specifies a 64-bit build.
       o 'GDAL_HOME' specifies the install location.
         For example, "C:\SDK\gdal\gdal-3.3.0\msvc2015_64" specifies the "msvc2015_64" sub-directory of the source code root "C:\SDK\gdal\gdal-3.3.0".
       o If you want a debug build then add 'DEBUG=1'.
         NOTE: It appears both debug and release builds use the same filenames (so they just overwrite each other).
               Might need to pick one or the other.
       o The 'devinstall' target ensures the libraries and include files are installed (in addition to GDAL executables and data from 'install' target).
    7. Add the *install* 'bin' directory to the PATH environment variable (eg, "C:\SDK\gdal\gdal-3.3.0\msvc2015_64\bin").
       This is so the GDAL DLL can be found at run-time.
    8. Add the GDAL *install* directory to the CMAKE_PREFIX_PATH environment variable (eg, "C:\SDK\gdal\gdal-3.3.0\msvc2015_64").
       This enables CMake to find GDAL when configuring GPlates (see BUILD.Windows).
       Note that this is not strictly necessary since CMake can find the GDAL install prefix using the PATH environment variable (CMake strips off 'bin').
    9. Set the GDAL_DATA environment variable to the installed GDAL data directory (eg, "C:\SDK\gdal\gdal-3.3.0\msvc2015_64\data").
       This enables GDAL to find its resource data.
    
    NOTE that GDAL 2.3 (and above) use C++11 features which requires Visual Studio 2015 (or above).
  
CGAL

  1. Get and install the latest CGAL version 4 (eg, 4.14.3) source code from http://www.cgal.org/
     * Download and run 'CGAL-4.14.3-Setup.exe'.
     * Under 'Choose Components' untick everything except:
         * 'GMP and MPFR precompiled libs' (note that 'Main CGAL' cannot be unticked).
     * Choose '32-bits' or '64-bits'.
     * Select the install location (don't use spaces in the path) - for example, 'C:/SDK/cgal/CGAL-4.14.3'.
         * In particular, do not install under Program Files on Windows Vista and
           above because you will likely run into permissions issues later.
     * Tick 'CGAL_DIR' environment variable - note: this helps GPlates find CGAL.
     * Tick 'Add CGAL/auxiliary/gmp/lib to PATH' (eg, C:\SDK\cgal\CGAL-4.14.3\auxiliary\gmp\lib).
  2. Note that we use CGAL as a header-only library (for CGAL >= 4.9) and don't need to build it.
     And for CGAL >= 4.12, we also don't need to configure CGAL (using CMake).
     So we're finished with installing CGAL (since we're using CGAL >= 4.12).
     Note: This solves issues with CGAL auto-linking whereby, for example, previously you might have compiled
           CGAL with Visual Studio 2015 and then when compiling GPlates with Visual Studio 2019 the auto-linking
           would look for a CGAL library with 'vc142' in its name (because using the 2019 compiler)
           and hence not find the CGAL library with 'vc140' in its name (built with the 2015 compiler).
           However CGAL still auto-links to GMP and MPFR libraries (included in its installation) for us.
    
    NOTE: CGAL 5 (and above) use C++14 features which requires Visual Studio 2015 (or above).
    NOTE: CGAL 4 appears to require Visual Studio 2017 (or above), which introduced __has_include,
          when compiling GPlates/pyGPlates (even though CGAL docs say VS2015 is fine). So while using VS2015
          should be fine for compiling the other dependencies, you might need VS2017+ to compile GPlates/pyGPlates.
          

zlib

  1. Download the source code for version 1.2.11 http://zlib.net/
  2. Extract to a location on your hard drive (eg, "C:\SDK\zlib\zlib-1.2.11").
  2. Open the appropriate Visual Studio solution in the 'contrib/vstudio/' directory.
     For example, for Visual Studio 2015 open 'contrib/vstudio/vc14/zlibvc.sln'.
  3. Build zlib:
     * Select the 'Release' build type. (GPlates developers may also want to build 'Debug').
     * Select configuration type 'x64' for a 64-bit build or 'Win32' for a 32-bit build.
     * Build the 'zlibvc' project.
  4. Copy the following built files to the root zlib directory (eg, "C:\SDK\zlib\zlib-1.2.11").
     For a 64-bit build these files are copied from the 'contrib\vstudio\vc14\x64\ZlibDllRelease\' directory.
     * zlibwapi.dll
     * zlibwapi.lib
     * zlibwapi.exp
     * zlibwapi.pdb
  5. Add the zlib root directory to the CMAKE_PREFIX_PATH environment variable (eg, C:\SDK\zlib\zlib-1.2.11 ).
  6. Add the zlib root directory to the PATH environment variable (eg, "C:\SDK\zlib\zlib-1.2.11") so the DLL can be found.

Subversion (optional, but recommended for developers)

  1. Get the command-line client from http://www.collab.net/downloads/subversion/
     Either the server and client bundle or the client-only bundle will suffice.
     Even if you have installed TortoiseSVN, this needs to be installed separately
     to provide the `svn` and `svnversion` command line tools.
      * Alternatively, Cygwin (http://www.cygwin.com/) contains Subversion.
  2. Add the location of the `svn` executable to the PATH environment variable
     (see above).
  If Subversion is not installed, the build number and branch name will not be
  automatically inserted into the About dialog box by the build process.

Graphviz (required for documentation, but not required to build GPlates)

  1. Get and install the latest version of Graphviz from http://www.graphviz.org/
  2. Add the location of the Graphviz main executable to the PATH environment
     variable (see above). This must be added *after* the FWTools \bin folder
     (which was added in a previous step).

Doxygen (required for documentation, but not required to build GPlates)

  1. Get and install the latest version of Doxygen from
     http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
      * Alternatively, Cygwin (http://www.cygwin.com/) contains Doxygen.
  2. Add the location of the Doxygen main executable to the PATH environment
     variable (see above).
