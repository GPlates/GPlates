# Where all the distribution files are located.
SET(GPLATES_SOURCE_DISTRIBUTION_DIR "${CMAKE_SOURCE_DIR}/cmake/distribution")
SET(GPLATES_BINARY_DISTRIBUTION_DIR "${CMAKE_BINARY_DIR}/cmake/distribution")

# NOTE: Since the Mac OSX platform does *not* "include(CPack)"
# we define a lot of the CPack variables. Normally the CPack
# module would set reasonable defaults for the variables we don't set.

#########################################################
# CPack configuration variables common to all platforms #
#########################################################

#   CPACK_PACKAGE_NAME - The name of the package (or application). If
#   not specified, defaults to the project name.
#
SET(CPACK_PACKAGE_NAME "${GPLATES_PACKAGE_NAME}")

#   CPACK_PACKAGE_VENDOR - The name of the package vendor (e.g.,
#   "Kitware").
#
SET(CPACK_PACKAGE_VENDOR "${GPLATES_PACKAGE_VENDOR}")

#   CPACK_PACKAGE_VERSION_MAJOR - Package major Version
#
SET(CPACK_PACKAGE_VERSION_MAJOR "${GPLATES_PACKAGE_VERSION_MAJOR}")

#   CPACK_PACKAGE_VERSION_MINOR - Package minor Version
#
SET(CPACK_PACKAGE_VERSION_MINOR "${GPLATES_PACKAGE_VERSION_MINOR}")

#   CPACK_PACKAGE_VERSION_PATCH - Package patch Version
#
SET(CPACK_PACKAGE_VERSION_PATCH "${GPLATES_PACKAGE_VERSION_PATCH}")

#   CPACK_PACKAGE_DESCRIPTION_FILE - A text file used to describe the
#   project. Used, for example, the introduction screen of a
#   CPack-generated Windows installer to describe the project.
#
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageDescription.txt")

#   CPACK_PACKAGE_DESCRIPTION_SUMMARY - Short description of the
#   project (only a few words).
#
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${GPLATES_PACKAGE_DESCRIPTION_SUMMARY}")

#   CPACK_PACKAGE_FILE_NAME - The name of the package file to generate,
#   not including the extension. For example, cmake-2.6.1-Linux-i686.
#
SET(CPACK_PACKAGE_FILE_NAME "${GPLATES_PACKAGE_NAME}-${GPLATES_PACKAGE_VERSION}-${CMAKE_SYSTEM_NAME}")

#   CPACK_RESOURCE_FILE_LICENSE - License file for the project, which
#   will typically be displayed to the user (often with an explicit
#   "Accept" button, for graphical installers) prior to installation.
#
SET(CPACK_RESOURCE_FILE_LICENSE "${GPLATES_SOURCE_DISTRIBUTION_DIR}/LicenseFile.txt")

#   CPACK_RESOURCE_FILE_README - ReadMe file for the project, which
#   typically describes in some detail
#
SET(CPACK_RESOURCE_FILE_README "${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageReadMe.txt")

#   CPACK_RESOURCE_FILE_WELCOME - Welcome file for the project, which
#   welcomes users to this installer. Typically used in the graphical
#   installers on Windows and Mac OS X.
#
SET(CPACK_RESOURCE_FILE_WELCOME "${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageWelcome.txt")

#   CPACK_MONOLITHIC_INSTALL - Disables the component-based 
#   installation mechanism, so that all components are always installed.
#
SET(CPACK_MONOLITHIC_INSTALL "TRUE")

#   CPACK_OUTPUT_CONFIG_FILE - The name of the CPack configuration file
#   for binary installers that will be generated by the CPack
#   module. Defaults to CPackConfig.cmake.
# NOTE: does not appear to be used by CMake 2.6.2
#
#   CPACK_PACKAGE_EXECUTABLES - Lists each of the executables along
#   with a text label, to be used to create Start Menu shortcuts on
#   Windows. For example, setting this to the list ccmake;CMake will
#   create a shortcut named "CMake" that will execute the installed
#   executable ccmake.
#
SET(CPACK_PACKAGE_EXECUTABLES "${GPLATES_MAIN_TARGET}" "${GPLATES_PACKAGE_NAME}")

#   CPACK_STRIP_FILES - List of files to be stripped. Starting with
#   CMake 2.6.0 CPACK_STRIP_FILES will be a boolean variable which
#   enables stripping of all files (a list of files evaluates to TRUE
#   in CMake, so this change is compatible).
#
SET(CPACK_STRIP_FILES "")

# The following CPack variables are specific to source packages, and 
# will not affect binary packages:
#
#   CPACK_SOURCE_PACKAGE_FILE_NAME - The name of the source package,
#   e.g., cmake-2.6.1
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}src")

#
#   CPACK_SOURCE_STRIP_FILES - List of files in the source tree that
#   will be stripped. Starting with CMake 2.6.0
#   CPACK_SOURCE_STRIP_FILES will be a boolean variable which enables
#   stripping of all files (a list of files evaluates to TRUE in CMake,
#   so this change is compatible).
#
SET(CPACK_SOURCE_STRIP_FILES "")

#   CPACK_SOURCE_OUTPUT_CONFIG_FILE - The name of the CPack
#   configuration file for source installers that will be generated by
#   the CPack module. Defaults to CPackSourceConfig.cmake.
# NOTE: does not appear to be used by CMake 2.6.2.
#
#   CPACK_SOURCE_IGNORE_FILES - Pattern of files in the source tree
#   that won't be packaged when building a source package. This is a
#   list of patterns, e.g., /CVS/;/\\.svn/;\\.swp$;\\.#;/#;.*~;cscope.*
#
# The following variables are for advanced uses of CPack:
#
#   CPACK_CMAKE_GENERATOR - What CMake generator should be used if the
#   project is CMake project. Defaults to the value of CMAKE_GENERATOR;
#   few users will want to change this setting.
SET(CPACK_CMAKE_GENERATOR "${CMAKE_GENERATOR}")

#
#   CPACK_INSTALL_CMAKE_PROJECTS - List of four values that specify
#   what project to install. The four values are: Build directory,
#   Project Name, Project Component, Directory. If omitted, CPack will
#   build an installer that installers everything.
#
#   CPACK_SYSTEM_NAME - System name, defaults to the value of
#   ${CMAKE_SYSTEM_NAME}.
#
SET(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}")

#   CPACK_PACKAGE_VERSION - Package full version, used internally. By
#   default, this is built from CPACK_PACKAGE_VERSION_MAJOR,
#   CPACK_PACKAGE_VERSION_MINOR, and CPACK_PACKAGE_VERSION_PATCH.
#
SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

#   CPACK_TOPLEVEL_TAG - Directory for the installed files.
#
SET(CPACK_TOPLEVEL_TAG "")

#   CPACK_INSTALL_COMMANDS - Extra commands to install components.
#
SET(CPACK_INSTALL_COMMANDS "")

#   CPACK_INSTALL_DIRECTORIES - Extra directories to install.
#
SET(CPACK_INSTALL_DIRECTORIES "")

# This needs to be set otherwise Mac OSX "PackageMaker" generator complains
# with error message "No package identifier specified".
SET(CPACK_PACKAGE_RELOCATABLE "true")

#####################################################


IF (WIN32 AND NOT UNIX)
    # Include the Visual Studio DLLs.
    INCLUDE(InstallRequiredSystemLibraries)

    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
        
	#   CPACK_GENERATOR - List of CPack generators to use. If not
	#   specified, CPack will create a set of options (e.g.,
	#   CPACK_BINARY_NSIS) allowing the user to enable/disable individual
	#   generators.
	#
	# Use the NSIS installer.
	# You'll need to install it first.
	SET(CPACK_GENERATOR "NSIS")

    #   CPACK_PACKAGE_INSTALL_DIRECTORY - Installation directory on the
    #   target system, e.g., "CMake 2.5".
    #
    # NOTE: this variable doesn't appear to be used by CMake 2.6.2.
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${GPLATES_PACKAGE_NAME} ${GPLATES_PACKAGE_VERSION}")

    # The following variables are specific to the graphical installers built
    # on Windows using the Nullsoft Installation System.
    #
    #   CPACK_PACKAGE_INSTALL_REGISTRY_KEY - Registry key used when
    #   installing this project.
    #
    #   CPACK_NSIS_MUI_ICON - The icon file (.ico) for the generated
    #   install program.
    #
    SET(CPACK_NSIS_MUI_ICON "${GPLATES_SOURCE_DISTRIBUTION_DIR}\\\\gplates_desktop_icon.ico")

    #   CPACK_NSIS_MUI_UNIICON - The icon file (.ico) for the generated
    #   uninstall program.
    #
    SET(CPACK_NSIS_MUI_UNIICON "${GPLATES_SOURCE_DISTRIBUTION_DIR}\\\\gplates_desktop_icon.ico")

    #   CPACK_PACKAGE_ICON - A branding image that will be displayed inside
    #   the installer.
    #
    # Apparently this needs to be 150x57 pixels.
    #SET(CPACK_PACKAGE_ICON "${GPLATES_SOURCE_DISTRIBUTION_DIR}\\\\headerimage.bmp")
    
    #   CPACK_NSIS_EXTRA_INSTALL_COMMANDS - Extra NSIS commands that will
    #   be added to the install Section.
    #
    #   CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS - Extra NSIS commands that will
    #   be added to the uninstall Section.
    #
    #   CPACK_NSIS_COMPRESSOR - The arguments that will be passed to the
    #   NSIS SetCompressor command.
    #
    #   CPACK_NSIS_MODIFY_PATH - If this is set to "ON", then an extra page
    #   will appear in the installer that will allow the user to choose
    #   whether the program directory should be added to the system PATH
    #   variable.
    #
    SET(CPACK_NSIS_MODIFY_PATH "ON")
    
    #   CPACK_NSIS_DISPLAY_NAME - The title displayed at the top of the
    #   installer.
    #
    SET(CPACK_NSIS_DISPLAY_NAME "${GPLATES_PACKAGE_NAME} ${GPLATES_PACKAGE_VERSION}")
    
    #   CPACK_NSIS_INSTALLED_ICON_NAME - A path to the executable that
    #   contains the installer icon.
    #
    SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\${GPLATES_PACKAGE_NAME} ${GPLATES_PACKAGE_VERSION}.exe")
    
    #   CPACK_NSIS_HELP_LINK - URL to a web site providing assistance in
    #   installing your application.
    #
    SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.gplates.org\\\\downloads.html")
    
    #   CPACK_NSIS_URL_INFO_ABOUT - URL to a web site providing more
    #   information about your application.
    #
    SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.gplates.org")
    
    #   CPACK_NSIS_CONTACT - Contact information for questions and comments
    #   about the installation process.
    #
    #   CPACK_NSIS_CREATE_ICONS_EXTRA - Additional NSIS commands for
    #   creating start menu shortcuts.
    #
    #   CPACK_NSIS_DELETE_ICONS_EXTRA -Additional NSIS commands to
    #   uninstall start menu shortcuts.
    #

    # CPack will generate a target 'package' that when built will
    # install the targets specified by any 'install' commands into
    # a staging area and package with the NSIS installer.
    INCLUDE(CPack)
ENDIF (WIN32 AND NOT UNIX)

IF (APPLE)
	# On Mac OSX we don't "include(CPack)" because we want to create
	# a standalone Mac OSX bundle (with library dependencies copied
	# into the bundle) but CPack doesn't currently seem to do that
	# without some coaxing. We need to use the "BundleUtilities.cmake"
	# provided with CMake 2.6 to do this copying and fixups of
	# internal references to libraries in the bundle executable
	# using 'install_name_tool'.

	# The area we copy the application bundle to.
	# It is here that it is made standalone in preparation for packaging.
	SET(STAGING_AREA_FOR_CPACK "${CMAKE_BINARY_DIR}/CPackStagingAreaMacOSX")

	#####################################################
	# CPack configuration variables specific to Mac OSX #
	#####################################################

	#   CPACK_PACKAGE_FILE_NAME - The name of the package file to generate,
	#   not including the extension. For example, cmake-2.6.1-Linux-i686.
	#
	SET(GPLATES_PACKAGE_VERSION_WITH_SVN_REVISION "${GPLATES_PACKAGE_VERSION}")
	# Add the Subversion version number to the package filename if this is a non-public release.
	# A non-public release has an empty 'GPLATES_SOURCE_CODE_CONTROL_VERSION_STRING' variable in 'ConfigDefault.cmake'.
	IF (NOT "${GPLATES_SOURCE_CODE_CONTROL_VERSION_STRING}")
		# Get the location, inside the staging area location, to copy the application bundle to.
		EXECUTE_PROCESS(
				COMMAND svnversion ${CMAKE_SOURCE_DIR}
				RESULT_VARIABLE SVN_VERSION_RESULT
				OUTPUT_VARIABLE SVN_VERSION_OUTPUT
				OUTPUT_STRIP_TRAILING_WHITESPACE
			   )

		IF (SVN_VERSION_RESULT)
			MESSAGE(STATUS "Unable to determine svn version number for non-public release - ignoring.")
		ELSE (SVN_VERSION_RESULT)
			SET(GPLATES_PACKAGE_VERSION_WITH_SVN_REVISION "${GPLATES_PACKAGE_VERSION}_r${SVN_VERSION_OUTPUT}")
		ENDIF (SVN_VERSION_RESULT)
	ENDIF (NOT "${GPLATES_SOURCE_CODE_CONTROL_VERSION_STRING}")

	# Finally set the actual package filename.
	SET(CPACK_PACKAGE_FILE_NAME "${GPLATES_PACKAGE_NAME}-${GPLATES_PACKAGE_VERSION_WITH_SVN_REVISION}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
	MESSAGE(STATUS "Package name: ${CPACK_PACKAGE_FILE_NAME}")

	#   CPACK_GENERATOR - List of CPack generators to use. If not
	#   specified, CPack will create a set of options (e.g.,
	#   CPACK_BINARY_NSIS) allowing the user to enable/disable individual
	#   generators.
	#
	# Use the Mac OSX installer package maker.
	# You'll need to install the XCode development tools first.
	#  CMake 2.6.3 or better has the 'DragNDrop' generator which
	# creates a ".dmg" with the GPlates app bundle and a sym link to /Applications in it.
	# CMake 2.6.2 or less has the 'PackageMaker' generator which creates a step-by-step installer.
	if ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")
		SET(CPACK_GENERATOR "DragNDrop")
	else ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")
		SET(CPACK_GENERATOR "PackageMaker")
	endif ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")

	# Package the bundle located in staging area.
	# This bundle is standalone with library dependencies copied into bundle.
	SET(CPACK_INSTALLED_DIRECTORIES "${STAGING_AREA_FOR_CPACK}" ".")

	#   CPACK_PACKAGE_INSTALL_DIRECTORY - Installation directory on the
	#   target system, e.g., "CMake 2.5".
	#
	# If using CMake 2.6.3 or better then we're using the 'DragNDrop' generator so place bundle in
	# root directory otherwise it place inside "Applications" directory in the ".dmg" file and
	# obscure the "Applications" sym link to the '/Applications' directory on installed machine.
	# If using CMake 2.6.2 or lower then we're using the 'PackageMaker' generator so put bundle in
	# '/Applications' directory so it will install there by default on installed machine (note: user will
	# be able to change this if they want to within the installer).
	if ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")
		SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/")
	else ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")
		SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/Applications")
	endif ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")

	# Seems to be same as CPACK_PACKAGE_INSTALL_DIRECTORY but not sure
	# which one is actually used by different versions of CMake.
	#
	# When package is installed on another computer don't install
	# in default '/usr' directory.
	SET(CPACK_PACKAGING_INSTALL_PREFIX "${CPACK_PACKAGE_INSTALL_DIRECTORY}")

	#   CPACK_SOURCE_GENERATOR - List of generators used for the source
	#   packages. As with CPACK_GENERATOR, if this is not specified then
	#   CPack will create a set of options (e.g., CPACK_SOURCE_ZIP)
	#   allowing users to select which packages will be generated.
	#

	# The following variable is specific to installers build on Mac OS X
	# using PackageMaker:
	#
	#   CPACK_OSX_PACKAGE_VERSION - The version of Mac OS X that the
	#   resulting PackageMaker archive should be compatible
	#   with. Different versions of Mac OS X support different
	#   features. For example, CPack can only build component-based
	#   installers for Mac OS X 10.4 or newer, and can only build
	#   installers that download component son-the-fly for Mac OS X 10.5
	#   or newer. If left blank, this value will be set to the minimum
	#   version of Mac OS X that supports the requested features. Set this
	#   variable to some value (e.g., 10.4) only if you want to guarantee
	#   that your installer will work on that version of Mac OS X, and
	#   don't mind missing extra features available in the installer
	#   shipping with later versions of Mac OS X.
	#
	SET(CPACK_OSX_PACKAGE_VERSION "10.4")

	#####################################################

	# If using CMake 2.6.3 or better then we're using the 'DragNDrop' generator so place a
	# "INSTALL.txt" file in the ".dmg" file to explain how to copy the GPlates bundle and
	# extras (such as sample data) onto the target machine (it may not be obvious to users
	# new to the Mac).
	if ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")
		if (NOT EXISTS "${GPLATES_BINARY_DISTRIBUTION_DIR}/INSTALL.txt")
		    file(WRITE "${GPLATES_BINARY_DISTRIBUTION_DIR}/INSTALL.txt"
			"To install drag the GPlates folder onto the 'Applications' shortcut"
			" or copy it to another location on your hard drive.\n"
			"The folder contains a 'GPlates' application bundle and some sample data.\n")
		endif (NOT EXISTS "${GPLATES_BINARY_DISTRIBUTION_DIR}/INSTALL.txt")
		# Add 'INSTALL.txt' to the list of extras to be copied to the CPACK staging area.
		set(GPLATES_CPACK_STAGING_AREA_EXTRAS
			"${GPLATES_CPACK_STAGING_AREA_EXTRAS} ${GPLATES_BINARY_DISTRIBUTION_DIR}/INSTALL.txt")
	endif ("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}" STRGREATER "2.6.2")

	# Set some configure variables that will be used by the following "CONFIGURE_FILE()" commands.
	SET(BUILT_BUNDLE "${EXECUTABLE_OUTPUT_PATH}/${GPLATES_MAIN_TARGET}.app")
	SET(PACKAGE_CPACK_CONFIG "${GPLATES_BINARY_DISTRIBUTION_DIR}/Package.cpack")
	SET(OSX_GET_BUNDLE_STAGING_AREA_LOCATION_SHELL_SCRIPT
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/GetBundleStagingAreaLocation.sh")
	SET(OSX_COPY_BUNDLE_TO_CPACK_STAGING_AREA_SHELL_SCRIPT
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/CopyBundleToCPackStagingArea.sh")
	SET(OSX_CREATE_INSTALLER_FROM_STANDALONE_BUNDLE_SHELL_SCRIPT
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/CreateInstallerFromStandaloneBundle.sh")
	SET(OSX_PACKAGE_BUNDLE_CMAKE_SCRIPT
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/PackageOSX.cmake")
	# Set some configure variables used to install and fixup Qt plugins.
	SET(GPLATES_QT_PLUGINS_ABSOLUTE )
	SET(GPLATES_QT_PLUGIN_PATHS_ABSOLUTE )
	FOREACH (qtplugin ${GPLATES_QT_PLUGINS_MACOSX})
		GET_FILENAME_COMPONENT(qtplugin_path "${qtplugin}" PATH)
		# Note: these are list variables so double quotes are not used.
		SET(GPLATES_QT_PLUGINS_ABSOLUTE
			${GPLATES_QT_PLUGINS_ABSOLUTE} ${QT_PLUGINS_DIR}/${qtplugin})
		SET(GPLATES_QT_PLUGIN_PATHS_ABSOLUTE
			${GPLATES_QT_PLUGIN_PATHS_ABSOLUTE} ${QT_PLUGINS_DIR}/${qtplugin_path})
	ENDFOREACH (qtplugin)

	# Configure the CPack configuration file.
	CONFIGURE_FILE("${GPLATES_SOURCE_DISTRIBUTION_DIR}/Package.cpack.in"
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/Package.cpack" IMMEDIATE)

	# Set executable permissions on template shell scripts.
	# When these files are checked out from Subversion they should already have execute permission
	# but sometimes they don't (eg, if source code was archived on a Windows machine and transferred to a Mac).
	# When the shell scripts get created by configure_file it should copy the file permissions.
	EXECUTE_PROCESS(
			COMMAND chmod +x
			"${GPLATES_SOURCE_DISTRIBUTION_DIR}/GetBundleStagingAreaLocation.sh.in"
			"${GPLATES_SOURCE_DISTRIBUTION_DIR}/CopyBundleToCPackStagingArea.sh.in"
			"${GPLATES_SOURCE_DISTRIBUTION_DIR}/CreateInstallerFromStandaloneBundle.sh.in"
			RESULT_VARIABLE EXECUTE_CHMOD_RESULT
			)

	IF (EXECUTE_CHMOD_RESULT)
			MESSAGE("Unable to set execute permissions on "
			"${OSX_GET_BUNDLE_STAGING_AREA_LOCATION_SHELL_SCRIPT} and "
			"${OSX_COPY_BUNDLE_TO_CPACK_STAGING_AREA_SHELL_SCRIPT} and "
			"${OSX_CREATE_INSTALLER_FROM_STANDALONE_BUNDLE_SHELL_SCRIPT}.")
			MESSAGE("You will need to set their execute permissions manually.")
	ENDIF (EXECUTE_CHMOD_RESULT)

	# Configure the shell scripts.
	CONFIGURE_FILE("${GPLATES_SOURCE_DISTRIBUTION_DIR}/GetBundleStagingAreaLocation.sh.in"
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/GetBundleStagingAreaLocation.sh" @ONLY IMMEDIATE)

	CONFIGURE_FILE("${GPLATES_SOURCE_DISTRIBUTION_DIR}/CopyBundleToCPackStagingArea.sh.in"
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/CopyBundleToCPackStagingArea.sh" @ONLY IMMEDIATE)

	CONFIGURE_FILE("${GPLATES_SOURCE_DISTRIBUTION_DIR}/CreateInstallerFromStandaloneBundle.sh.in"
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/CreateInstallerFromStandaloneBundle.sh" @ONLY IMMEDIATE)

	# Configure the cmake script.
	CONFIGURE_FILE("${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageOSX.cmake.in"
		"${GPLATES_BINARY_DISTRIBUTION_DIR}/PackageOSX.cmake" @ONLY IMMEDIATE)

	# Create a custom target for making our built bundle standalone and
	# packaging it up in an installer.
	ADD_CUSTOM_TARGET(package
		${CMAKE_COMMAND} -P "${OSX_PACKAGE_BUNDLE_CMAKE_SCRIPT}"
		)

	# Make sure the main GPlates target executable is built before we try to package it up.
	ADD_DEPENDENCIES(package ${GPLATES_MAIN_TARGET})
ENDIF (APPLE)
