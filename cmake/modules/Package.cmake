################################################################################################
#                                                                                              #
# Package targets.                                                                             #
#                                                                                              #
# Package targets to run on *other* machines (rather than just the *build* machine).           #
#                                                                                              #
################################################################################################

# Where all the distribution files are located.
SET(GPLATES_SOURCE_DISTRIBUTION_DIR "${GPlates_SOURCE_DIR}/cmake/distribution")

#########################################################
# CPack configuration variables common to all platforms #
#########################################################

#   CPACK_PACKAGE_NAME - The name of the package (or application). If
#   not specified, defaults to the project name.
#
SET(CPACK_PACKAGE_NAME "${GPLATES_PACKAGE_NAME}")

#   CPACK_PACKAGE_VENDOR - The name of the package vendor
#
SET(CPACK_PACKAGE_VENDOR "${GPLATES_PACKAGE_VENDOR}")

#   CPACK_PACKAGE_VERSION_MAJOR - Package major Version
#
SET(CPACK_PACKAGE_VERSION_MAJOR "${GPlates_VERSION_MAJOR}")

#   CPACK_PACKAGE_VERSION_MINOR - Package minor Version
#
SET(CPACK_PACKAGE_VERSION_MINOR "${GPlates_VERSION_MINOR}")

#   CPACK_PACKAGE_VERSION_PATCH - Package patch Version
#
SET(CPACK_PACKAGE_VERSION_PATCH "${GPlates_VERSION_PATCH}")

#   CPACK_PACKAGE_DESCRIPTION_FILE - A text file used to describe the
#   project. Used, for example, the introduction screen of a
#   CPack-generated Windows installer to describe the project.
#
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageDescription.txt")

#   CPACK_PACKAGE_DESCRIPTION_SUMMARY - Short description of the
#   project (only a few words).
#
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${GPLATES_PACKAGE_DESCRIPTION_SUMMARY}")

#   CPACK_PACKAGE_FILE_NAME - The name of the package file to generate,
#   not including the extension. For example, cmake-2.6.1-Linux-i686.
#
SET(CPACK_PACKAGE_FILE_NAME "${GPLATES_PACKAGE_NAME}-${GPlates_VERSION}-${CMAKE_SYSTEM_NAME}")

#   CPACK_RESOURCE_FILE_LICENSE - License file for the project, which
#   will typically be displayed to the user (often with an explicit
#   "Accept" button, for graphical installers) prior to installation.
#
SET(CPACK_RESOURCE_FILE_LICENSE "${GPLATES_SOURCE_DISTRIBUTION_DIR}/LicenseFile.txt")

#   CPACK_RESOURCE_FILE_README - ReadMe file for the project, which
#   typically describes in some detail
#
SET(CPACK_RESOURCE_FILE_README "${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageReadMe.txt")

#   CPACK_RESOURCE_FILE_WELCOME - Welcome file for the project, which
#   welcomes users to this installer. Typically used in the graphical
#   installers on Windows and Mac OS X.
#
SET(CPACK_RESOURCE_FILE_WELCOME "${GPLATES_SOURCE_DISTRIBUTION_DIR}/PackageWelcome.txt")

#   CPACK_MONOLITHIC_INSTALL - Disables the component-based 
#   installation mechanism, so that all components are always installed.
#
SET(CPACK_MONOLITHIC_INSTALL "TRUE")

#   CPACK_OUTPUT_CONFIG_FILE - The name of the CPack configuration file
#   for binary installers that will be generated by the CPack
#   module. Defaults to CPackConfig.cmake.
# NOTE: does not appear to be used by CMake 2.6.2
#
#   CPACK_PACKAGE_EXECUTABLES - Lists each of the executables along
#   with a text label, to be used to create Start Menu shortcuts on
#   Windows. For example, setting this to the list ccmake;CMake will
#   create a shortcut named "CMake" that will execute the installed
#   executable ccmake.
#
SET(CPACK_PACKAGE_EXECUTABLES gplates "${GPLATES_PACKAGE_NAME}")

#   CPACK_STRIP_FILES - List of files to be stripped. Starting with
#   CMake 2.6.0 CPACK_STRIP_FILES will be a boolean variable which
#   enables stripping of all files (a list of files evaluates to TRUE
#   in CMake, so this change is compatible).
#
SET(CPACK_STRIP_FILES "")

# The following CPack variables are specific to source packages, and 
# will not affect binary packages:
#
#   CPACK_SOURCE_PACKAGE_FILE_NAME - The name of the source package,
#   e.g., cmake-2.6.1
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}src")

#
#   CPACK_SOURCE_STRIP_FILES - List of files in the source tree that
#   will be stripped. Starting with CMake 2.6.0
#   CPACK_SOURCE_STRIP_FILES will be a boolean variable which enables
#   stripping of all files (a list of files evaluates to TRUE in CMake,
#   so this change is compatible).
#
SET(CPACK_SOURCE_STRIP_FILES "")

#   CPACK_SOURCE_OUTPUT_CONFIG_FILE - The name of the CPack
#   configuration file for source installers that will be generated by
#   the CPack module. Defaults to CPackSourceConfig.cmake.
# NOTE: does not appear to be used by CMake 2.6.2.
#
#   CPACK_SOURCE_IGNORE_FILES - Pattern of files in the source tree
#   that won't be packaged when building a source package. This is a
#   list of patterns, e.g., /CVS/;/\\.svn/;\\.swp$;\\.#;/#;.*~;cscope.*
#

#
#   CPACK_INSTALL_CMAKE_PROJECTS - List of four values that specify
#   what project to install. The four values are: Build directory,
#   Project Name, Project Component, Directory. If omitted, CPack will
#   build an installer that installers everything.
#

#   CPACK_PACKAGE_VERSION - Package full version, used internally. By
#   default, this is built from CPACK_PACKAGE_VERSION_MAJOR,
#   CPACK_PACKAGE_VERSION_MINOR, and CPACK_PACKAGE_VERSION_PATCH.
#
SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

#   CPACK_TOPLEVEL_TAG - Directory for the installed files.
#
SET(CPACK_TOPLEVEL_TAG "")

#   CPACK_INSTALL_COMMANDS - Extra commands to install components.
#
SET(CPACK_INSTALL_COMMANDS "")

# This needs to be set otherwise Mac OSX "PackageMaker" generator complains
# with error message "No package identifier specified".
SET(CPACK_PACKAGE_RELOCATABLE "true")

# Ensure contents written to cpack configuration file are properly escaped.
set(CPACK_VERBATIM_VARIABLES TRUE)

#####################################################


IF (WIN32 AND NOT UNIX)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
        
	#   CPACK_GENERATOR - List of CPack generators to use. If not
	#   specified, CPack will create a set of options (e.g.,
	#   CPACK_BINARY_NSIS) allowing the user to enable/disable individual
	#   generators.
	#
	# Use the NSIS installer.
	# You'll need to install it first.
	SET(CPACK_GENERATOR "NSIS")

    #   CPACK_PACKAGE_INSTALL_DIRECTORY - Installation directory on the
    #   target system, e.g., "CMake 2.5".
    #
    # NOTE: this variable doesn't appear to be used by CMake 2.6.2.
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${GPLATES_PACKAGE_NAME} ${GPlates_VERSION}")

    # The following variables are specific to the graphical installers built
    # on Windows using the Nullsoft Installation System.
    #
    #   CPACK_PACKAGE_INSTALL_REGISTRY_KEY - Registry key used when
    #   installing this project.
    #
    #   CPACK_NSIS_MUI_ICON - The icon file (.ico) for the generated
    #   install program.
    #
    SET(CPACK_NSIS_MUI_ICON "${GPLATES_SOURCE_DISTRIBUTION_DIR}\\\\gplates_desktop_icon.ico")

    #   CPACK_NSIS_MUI_UNIICON - The icon file (.ico) for the generated
    #   uninstall program.
    #
    SET(CPACK_NSIS_MUI_UNIICON "${GPLATES_SOURCE_DISTRIBUTION_DIR}\\\\gplates_desktop_icon.ico")

    #   CPACK_PACKAGE_ICON - A branding image that will be displayed inside
    #   the installer.
    #
    # Apparently this needs to be 150x57 pixels.
    #SET(CPACK_PACKAGE_ICON "${GPLATES_SOURCE_DISTRIBUTION_DIR}\\\\headerimage.bmp")
    
    #   CPACK_NSIS_EXTRA_INSTALL_COMMANDS - Extra NSIS commands that will
    #   be added to the install Section.
    #
    #   CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS - Extra NSIS commands that will
    #   be added to the uninstall Section.
    #
    #   CPACK_NSIS_COMPRESSOR - The arguments that will be passed to the
    #   NSIS SetCompressor command.
    #
    #   CPACK_NSIS_MODIFY_PATH - If this is set to "ON", then an extra page
    #   will appear in the installer that will allow the user to choose
    #   whether the program directory should be added to the system PATH
    #   variable.
    #
    SET(CPACK_NSIS_MODIFY_PATH "ON")
    
    #   CPACK_NSIS_DISPLAY_NAME - The title displayed at the top of the
    #   installer.
    #
    SET(CPACK_NSIS_DISPLAY_NAME "${GPLATES_PACKAGE_NAME} ${GPlates_VERSION}")
    
    #   CPACK_NSIS_INSTALLED_ICON_NAME - A path to the executable that
    #   contains the installer icon.
    #
    SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\${GPLATES_PACKAGE_NAME} ${GPlates_VERSION}.exe")
    
    #   CPACK_NSIS_HELP_LINK - URL to a web site providing assistance in
    #   installing your application.
    #
    SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.gplates.org\\\\downloads.html")
    
    #   CPACK_NSIS_URL_INFO_ABOUT - URL to a web site providing more
    #   information about your application.
    #
    SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.gplates.org")
    
    #   CPACK_NSIS_CONTACT - Contact information for questions and comments
    #   about the installation process.
    #
    #   CPACK_NSIS_CREATE_ICONS_EXTRA - Additional NSIS commands for
    #   creating start menu shortcuts.
    #
    #   CPACK_NSIS_DELETE_ICONS_EXTRA -Additional NSIS commands to
    #   uninstall start menu shortcuts.
    #
ENDIF (WIN32 AND NOT UNIX)

IF (APPLE)
	###################################################
	# CPack configuration variables specific to macOS #
	###################################################

	#   CPACK_PACKAGE_FILE_NAME - The name of the package file to generate,
	#   not including the extension. For example, cmake-2.6.1-Linux-i686.
	#
	# If this is *not* a public release then append '_r<svn-version>' to the version part of the package name.
	# Note: When GPLATES_PUBLIC_RELEASE is not defined (ie, not a public release) then GPlates_WC_LAST_CHANGED_REV should be defined.
	if (GPlates_WC_LAST_CHANGED_REV)
		SET(CPACK_PACKAGE_FILE_NAME "${GPLATES_PACKAGE_NAME}-${GPlates_VERSION}_r${GPlates_WC_LAST_CHANGED_REV}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
	else()
		SET(CPACK_PACKAGE_FILE_NAME "${GPLATES_PACKAGE_NAME}-${GPlates_VERSION}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
	endif()

	#   CPACK_GENERATOR - List of CPack generators to use. If not
	#   specified, CPack will create a set of options (e.g.,
	#   CPACK_BINARY_NSIS) allowing the user to enable/disable individual
	#   generators.
	#
	# Use the 'DragNDrop' generator which creates a ".dmg" with the GPlates app bundle and a sym link to /Applications in it.
	SET(CPACK_GENERATOR DragNDrop)

	#   CPACK_PACKAGE_INSTALL_DIRECTORY - Installation directory on the
	#   target system, e.g., "CMake 2.5".
	#
	# We're using the 'DragNDrop' generator so place bundle in the root directory otherwise it places inside
	# "Applications" directory in the ".dmg" file and obscures the "Applications" sym link to the '/Applications'
	# directory on installed machine.
	SET(CPACK_PACKAGE_INSTALL_DIRECTORY "/")

	# Seems to be same as CPACK_PACKAGE_INSTALL_DIRECTORY but not sure
	# which one is actually used by different versions of CMake.
	#
	# When package is installed on another computer don't install
	# in default '/usr' directory.
	SET(CPACK_PACKAGING_INSTALL_PREFIX "${CPACK_PACKAGE_INSTALL_DIRECTORY}")

	#   CPACK_SOURCE_GENERATOR - List of generators used for the source
	#   packages. As with CPACK_GENERATOR, if this is not specified then
	#   CPack will create a set of options (e.g., CPACK_SOURCE_ZIP)
	#   allowing users to select which packages will be generated.
	#

	#####################################################
ENDIF (APPLE)

# CPack will generate a target 'package' that, when built, will
# install the targets specified by any 'install' commands into
# a staging area and package them.
INCLUDE(CPack)
