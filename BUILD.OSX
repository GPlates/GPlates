Build On macOS

Table of Contents

 1. Introduction
 2. Build process
     1. Development environment
     2. Package dependencies
     3. Commands to build GPlates/pyGPlates
     4. The GPlates application
     5. The pyGPlates library
     6. Installing GPlates/pyGPlates

Introduction

This page details how to build GPlates or pyGPlates from a source release.
The source code will compile either GPlates or pyGPlates depending on where
you obtained the source code (eg, from a GPlates release or a pyGPlates release).

Build process

Development environment

You'll need the command-line tools for XCode installed. If you have not already installed XCode then this can be
accomplished by running the following in a terminal window (open Applications->Utilities->Terminal in Finder):

    xcode-select --install

Package dependencies

Firstly, you should ensure that you have installed all the packages which are dependencies for compilation.

See "DEPS.OSX" for more information on installing dependencies.

Commands to build GPlates/pyGPlates

 1. Open a terminal window (Applications->Utilities->Terminal in Finder).
 2. Change your working directory (if not already) into the base directory of the source code.
 3. Build GPlates (or pyGPlates) by typing:

    cmake -D CMAKE_PREFIX_PATH:FILEPATH=<path_to_qt> .
    make

    Note that since Qt and Qwt are built from source (see DEPS.OSX) you will need to explicitly specify their location when building GPlates/pyGPlates.
    For example, if you installed Qt 6.2.4 (and installed Qwt inside it) then you can build GPlates/pyGPlates by typing:
    
        cmake -D CMAKE_PREFIX_PATH:FILEPATH="/usr/local/Qt-6.2.4;/usr/local/Qt-6.2.4/lib" .
        make
    
    ...or, for example, for Qt 5.15.5:
    
        cmake -D CMAKE_PREFIX_PATH:FILEPATH="/usr/local/Qt-5.15.5;/usr/local/Qt-5.15.5/lib" .
        make

The GPlates application

If you are compiling pyGPlates source code then please skip this section.

The GPlates application bundle will be called "gplates.app", located in the "bin" directory.
However this will appear simply as 'gplates' in the file explorer (Finder),
and you can run GPlates by double-clicking on it.

Alternatively, to run gplates from the command-line (Terminal window) you can type:

    bin/gplates.app/Contents/MacOS/gplates

...this is because the actual gplates executable is installed inside the GPlates application bundle.

If you want to do more than test GPlates from this local build directory,
you will need to install it on your system.

The pyGPlates library

If you are compiling GPlates source code then please skip this section.

The pyGPlates library will be called "pygplates.so" and located in the "bin" directory.
You would then add the "bin" directory to PYTHONPATH (as an absolute path).

If you want to do more than test pyGPlates from this local build directory,
you will need to install it on your system.

Installing GPlates/pyGPlates

Unlike Linux, on macOS GPlates (or pyGPlates) is installed as a standalone bundle (or standalone Python package).
This means the dependency libraries are included inside the GPlates application bundle (or packaged along with the pyGPlates library).

The command

    cmake --install . --prefix <install_dir>

will install a GPlates standalone application bundle (or a pyGPlates standalone Python package) to the directory specified by '--prefix'.
For example:

    cmake .
    make
    cmake --install . --prefix $HOME

will install a standalone GPlates (or pyGPlates) into your home directory.
Note that for pyGPlates you would then add "~/" to PYTHONPATH (not "~/pygplates/").
