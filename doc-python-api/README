Generating GPlates python API documentation using Sphinx
========================================================

This documentation gives an overview of generating the GPlates python API documentation using Sphinx to generate HTML from the python docstrings (classes, class methods, functions, etc) in the 'pygplates' python module.


Installing Sphinx
-----------------

The following link provides a useful summary of installing sphinx via PIP:
  http://www.pip-installer.org/en/latest/installing.html
  
Essentially it involves downloading the 'ez_setup.py' and 'get-pip.py' python scripts and running them:
  python ez_setup.py
  python get-pip.py
  pip install sphinx

There's also the package manager approach on Linux.


Installing Sphinx on Windows
----------------------------

On Windows, if you have built python from source (maybe it's also the same when python is installed from a (MSI) installer) then there are issues running the 'get-pip.py' script (this was tested using python 2.7.5) so it is probably better to find another way to install PIP.

An interesting link which describes building python for Visual Studio 2010 is https://wiki.python.org/moin/VS2010
Some of the steps in that link are similar to those described below.

The following issues were encountered running the 'get-pip.py' script (using a python interpreter built from source):

 * It requires the 'bzip2' library, and unless this library is installed (next to the source code of python itself) it will fail to compile (the 'bz2' project in the python Visual Studio solution). Installing next to the source code of python itself enables python to find it automatically.

 * It requires the 'openssl' library (which should also be installed next to the source code of python itself) in order to avoid the error 'ImportError: cannot import name HTTPSHandler'.

 * You need to install ActivePerl - http://www.activestate.com/activeperl

 * Install (as mentioned in openssl 'INSTALL.W32' text file) NASM (http://nasm.sourceforge.net/) and add it to the PATH environment variable.

 * There's a bug in the 'build_ssl.py' script in the python source code (eg, 'PC/VS8.0/build_ssl.py' if you're using Visual Studio 2005). Unfortunately the patch at http://bugs.python.org/issue10752 does not seem to allow the build system to find the Perl executable. So I ended up just hardwiring in the path to my ActivePerl executable with something like the following code in the 'find_working_perl()' function...
    def find_working_perl(perls):
        for perl in perls:
            if perl == 'C:\\programs\\Perl64\\bin\\perl.exe':
                return perl
        print("Can not find a suitable PERL:")
        print(" Please install ActivePerl and ensure it appears on your path")
        return None

 * Run 'python build_ssl.py Release Win32' from its directory (eg, 'PC/VS8.0/build_ssl.py').
   If get compile errors (when it compiles C code) then remove the offending ('.obj') files from the makefile in openssl directory ('ms/nt.mak') until it compiles right through.

 * Edit 'pyproject.vsprops' (eg, in 'PC/VS8.0/') and change "opensslDir" value to "$(externalsDir)\openssl-1.0.1e", or whichever openssl version you have.

After these steps, most of the projects in the python source code (in Visual Studio) should compile.
Some projects don't compile but not all projects are required to compile in order to have a working python installation.
In fact, although the documentation in the 2.7.5 python source code does not mention this, it is OK that building the entire solution fails for some projects (in fact there's a patch to the docs somewhere that explicitly states this, but it's not yet mentioned in python 2.7.5).

After all that I was finally able to run...
  python get-pip.py
...and, after running 'pip install sphinx', ended up with 'sphinx-build.exe' in the 'python-2.7.5/Scripts/' directory (which is also where the 'easy_install.exe' was installed).
Also make sure you run the cmd shell as administrator (right click -> "Run as administrator") before executing 'python ez_setup.py' and 'python get-pip.py'. I think I also changed current working directory to the 'Scripts/' directory before running those commands.
Note that the 'Scripts/' sub-directory should be added to the PATH environment variable.


Building the HTML documentation
-------------------------------

To build the HTML documentation, build the 'doc-python-api' target.

For example, on Linux:
  make doc-python-api

On Windows, build the 'doc-python-api' project in Visual Studio.

'doc-python-api' is a CMake-generated target that uses the installed 'sphinx-build' executable to create HTML from the built 'pygplates' module.


Viewing the HTML documentation
------------------------------

The built documentation should be in the following HTML file, relative to the cmake *build* directory corresponding to your GPlates source directory (if you are doing in-place cmake builds then the root GPlates source directory is the same as the build directory):

  doc-python-api/html/index.html


Issues
------

This section covers various issues encountered while using Sphinx to document pygplates.


Use Sphinx version 1.2.3
^^^^^^^^^^^^^^^^^^^^^^^^

The best Sphinx version to use currently is 1.2.3 (not 1.3).

First some background:
Using the 'autosummary' directive (eg, in 'pygplates_reference.rst' file) combined with its ':toctree:' option
will cause Sphinx to generate a stub '.rst' file for each class/function listed under an 'autosummary' directive
(provided the 'autosummary_generate' is set to 'True' in the 'conf.py.in' file).
By default autosummary will list the methods in a class' '.rst' file but it won't generate documentation
for the methods. Previously we used 'automodule' (instead of 'autosummary' to generate the documentation)
and it required the ':members:' option to the class members. But when 'autosummary' generates stub
files (using the ':toctree:' option) it generates an 'autoclass' directive in each stub file but doesn't
add the ':members:' option. So we need to set ':members:' as on by default using the 'autodoc_default_flags'
flag (in 'conf.py.in'). We also need to turn ':inherited-members:' on by default since each stub class
autosummary listing seems to include inherited members and if we don't generate documentation for them
then those listing entries will have no hyperlinks (like the non-inherited members).

So with Sphinx 1.3, when using 'autosummary' with its ':toctree:' option, it seems only the pure Python
class methods are listed in the class' 'Methods' section. Our C module methods (boost-python) are not listed.
This problem is not there for Sphinx 1.2.3.


Use autosummary (with :toctree:) instead of automodule
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As noted above we previously used 'automodule' (instead of 'autosummary').
This listed all functions/class/methods on a single HTML page (our reference page).
Using 'autosummary' (with its ':toctree:' option) generates a stub '.rst' file for each function/class.
This means each function and class has its own HTML page which makes for easier browser loading, etc.
Another advantage is 'autosummary' generates a short list of the methods of a class (in addition
to the usual detailed method documentation). This is something 'automodule' does not do as far as I'm aware.


Specify default autodoc flags
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We're currently using autosummary with ':toctree:' to generate a stub ".rst" file for each class/function.
But to get decent looking documentation we still need to change the 'autodoc_default_flags' flag
to include 'members' and 'inherited-members', otherwise they will be missing from the default
documentation generated by autosummary (and ":toctree:").

So the 'autdoc_default_flags' should look something like:
autodoc_default_flags = ['members', 'inherited-members', 'show-inheritance']


Adding, removing or renaming functions or class methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Whenever you add/remove/rename any functions/class-methods be sure to delete the 'doc-python-api/generated/'
directory in the GPlates (pygplates) build directory (same as source directory if using in-place builds).

This is because Sphinx does not appear to update the 'autosummary' generated (via ':toctree:')
stub '.rst' files.


Using templates with autosummary is problematic
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

At least it was problematic for me.

'autosummary' has its own template for classes and modules when it generates stub '.rst' files
(for each function/class). If you want to change it slightly (such as adding the :nosignatures:
option under the 'autosummary' method listing it puts in each stub '.rst' file) then you need
to make a template. This can be done by specifying a 'templates_path' variable in 'conf.py.in' -
it seems to default to "['_templates']" - and then putting your own 'autosummary/class.rst' file
relative to that path (or if you want to use a different filename then use the ':template:' option
under 'autosummary').

So that seems relatively straightforward.
Templates change the appearance of each class/function from the default provided by autosummary.

But there are two problems:
 1) There's a gotcha with Sphinx versions prior to 1.3, and
 2) I just can't seem to get it to work.

1) It seems prior to Sphinx version 1.3 (eg, 1.2.3) '_templates' needs to be added to the 'exclude_patterns'
   variable in 'conf.py.in' to workaround a Sphinx bug that was apparently fixed in 1.3
   The bug is mentioned here: https://groups.google.com/forum/#!topic/sphinx-dev/KGdNpizMqDE
   So I've verified that adding '_templates' to 'exclude_patterns' avoids the error message with 1.2.3
   and that it's not needed with 1.3.

2) However neither 1.2.3 nor 1.3 seem to actually use our templates.
   It seems the default autosummary templates are always used regardless.

However it seems we can get decent looking documentation without using templates by specifying the
'autodoc_default_flags' flag (in 'conf.py.in') include 'members' and 'inherited-members' such that
autosummary generates them (by effectively adding ':members:' to the 'autoclass' it places in
each stub '.rst' file - although you won't actually see ':members:' in there - but generates
documentation as if it was there).

So we're not currently using autosummary *templates*.


Set autodoc_docstring_signature to True
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Setting 'autodoc_docstring_signature' to 'True' just gets autodoc to extract the function signature from the
first line of the docstring in C modules (because it can't introspect C functions - only pure Python functions).
The default value is True anyway so we don't really need to set this.
