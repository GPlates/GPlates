Build On Linux

Table of Contents

 1. Introduction
 2. Build process
     1. Package dependencies
     2. Commands to build GPlates/pyGPlates
     3. The GPlates executable (or pyGPlates library)
     4. Installing GPlates/pyGPlates

Introduction

This page details how to build GPlates or pyGPlates from a source release.
The source code will compile either GPlates or pyGPlates depending on where
you obtained the source code (eg, from a GPlates release or a pyGPlates release).

Build process

Package dependencies

Firstly, you should ensure that you have installed all the packages which are
dependencies for compilation.

See "DEPS.Linux" for more information on installing dependencies.

Commands to build GPlates/pyGPlates

 1. Change your working directory (if not already) into the base directory of
    the GPlates/pyGPlates source code.
 2. Build GPlates (or pyGPlates) by typing:

    cmake .
    make

The GPlates executable (or pyGPlates library)

The GPlates executable (or pyGPlates library) will be called "gplates" (or "pygplates.so") and
located in the "bin" directory.
If you want to do more than test GPlates (or pyGPlates) from this local directory,
you will need to install it on your system.

Installing GPlates/pyGPlates

The command

    sudo make install

Will copy the "gplates" executable (or "pygplates.so" library) into a sub-directory of the default location,
"/usr/local". The GPlates executable will be installed as "/usr/local/bin/gplates" (or the pyGPlates library
installed as "/usr/local/lib/pygplates.so"). For pyGPlates you would then add "/usr/local/lib" to PYTHONPATH.
Note that you will need to be root to install software to "/usr/local". On Ubuntu systems, this is accomplished
by prefixing the command with "sudo", i.e. "sudo make install".

If you wish to install to a different location, use the "-DCMAKE_INSTALL_PREFIX:STRING" argument to
"cmake". For example:

    cmake -DCMAKE_INSTALL_PREFIX:STRING=$HOME/usr .
    make
    make install

This will install GPlates (or pyGPlates) into your home directory as "~/usr/bin/gplates"
(or "~/usr/lib/pygplates.so"). Note that for pyGPlates you would then add "~/usr/lib" to PYTHONPATH.
