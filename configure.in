# $Id$
# Configure script for GPlates

AC_INIT([GPlates], [0.001])
AC_PREREQ(2.53)
AC_CONFIG_SRCDIR(src/geo/GeologicalData.h)
#AC_CONFIG_HEADER(src/global/config.h)

# Check C++ compiler
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL

# What system are we on?
AC_PATH_PROG(unamepath, uname)
if test "_$unamepath" = _; then
	system="unknown"
else
	AC_MSG_CHECKING(system type)
	system=`$unamepath -s`
	AC_MSG_RESULT($system)
fi

# System-dependant options
debug_format=""
if test "$system" = "Linux"; then
	debug_format="stabs+"
elif test "$system" = "SunOS"; then
	debug_format="stabs"
fi

# Check for required features
AC_CXX_BOOL
if test "$ac_cv_cxx_bool" != yes; then
	AC_MSG_ERROR([bool is not a built-in type])
fi
AC_CXX_EXCEPTIONS
if test "$ac_cv_cxx_exceptions" != yes; then
	AC_MSG_ERROR([compiler doesn't support exceptions])
fi
AC_CXX_TEMPLATES
if test "$ac_cv_cxx_templates" != yes; then
	AC_MSG_ERROR([compiler doesn't support templates])
fi
AC_CXX_NAMESPACES
if test "$ac_cv_cxx_namespaces" != yes; then
	AC_MSG_ERROR([compiler doesn't implement namespaces])
fi
AC_CXX_HAVE_IEEE_MATH
if test "$ac_cv_cxx_have_ieee_math" != yes; then
	AC_MSG_ERROR([compiler doesn't support IEEE maths library])
fi
AC_CXX_HAVE_SSTREAM
if test "$ac_cv_cxx_have_sstream" != yes; then
	AC_MSG_ERROR([can't find stringstream])
fi
AC_CXX_HAVE_STD
if test "$ac_cv_cxx_have_std" != yes; then
	AC_MSG_ERROR([no ISO C++ standard library present])
fi
AC_CXX_HAVE_STL
if test "$ac_cv_cxx_have_stl" != yes; then
	AC_MSG_ERROR([no C++ STL present])
fi
AC_CXX_RTTI
if test "$ac_cv_cxx_rtti" != yes; then
	AC_MSG_ERROR([compiler doesn't support RTTI])
fi


EXTRA_CFLAGS=""

# Using '--enable-dev' changes compile-time flags to be more strict
turn_on_dev="no"
AC_ARG_ENABLE(dev, [  --enable-dev            Enable developer flags],
[
	turn_on_dev="yes"
	EXTRA_CFLAGS="$EXTRA_CFLAGS -Wall -pedantic -ansi -W -Wfloat-equal -Wshadow -Wcast-align -Wwrite-strings -Wctor-dtor-privacy -Wnon-virtual-dtor -Wold-style-cast -Wpointer-arith -Werror -g$debug_format"
])

# Using '--enable-opt' turns on optimisations
turn_on_opt="no"
AC_ARG_ENABLE(opt, [  --enable-opt            Enable optimisation flags],
[
	turn_on_opt="yes"
	EXTRA_CFLAGS="$EXTRA_CFLAGS -fshort-enums -fstrength-reduce"
])

# Using '--enable-prof' enables profiling flags
turn_on_prof="no"
AC_ARG_ENABLE(prof, [  --enable-prof           Enable profiling],
[
	turn_on_prof="yes"
	EXTRA_CFLAGS="$EXTRA_CFLAGS -g -pg"
	EXTRA_LDFLAGS="-g -pg"
])

AC_SUBST(EXTRA_CFLAGS)
AC_SUBST(EXTRA_LDFLAGS)


AC_MSG_CHECKING([for Plesiosaurs in Loch Ness])
AC_MSG_RESULT(yes)


# Write output
AC_OUTPUT(Makefile
	src/Makefile)



# Some warnings
if test "$turn_on_dev" = "yes"; then
	echo "###"
	echo "### WARNING: You have enabled Developer flags. Unless you"
	echo "###          are a developer, you are strongly advised to"
	echo "###          leave developer flags turned off, or you may"
	echo "###          have problems compiling GPlates."
fi
if test "$turn_on_prof" = "yes"; then
	echo "###"
	echo "### WARNING: You have enabled Profiling. Unless you are a"
	echo "###          developer, you are strongly advised to leave"
	echo "###          profiling turned off, or you may have problems"
	echo "###          compiling or running GPlates."
fi
if test "$turn_on_opt" = "yes" -a "$turn_on_dev" = "yes"; then
	echo "###"
	echo "### WARNING: You have enabled both Optimisation and Development"
	echo "###          flags. This is highly discouraged, as it may cause"
	echo "###          problems compiling or running GPlates."
fi

echo "###############################################"
echo "#  GPlates is now configured. Simply type...  #"
echo "#          make                               #"
echo "#  ... and GPlates will be compiled.          #"
echo "###############################################"
