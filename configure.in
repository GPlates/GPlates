# $Id$
# Configure script for GPlates

package_is_beta="yes"		# change this to "no" for releases

AC_INIT([GPlates], [0.9-pre], [http://sourceforge.net/tracker/?func=add&group_id=74515&atid=541217], [gplates])
AC_PREREQ(2.53)
AC_DEFINE([COPYRIGHT_STRING], [], ["Copyright (C) 2003, 2004, 2005, 2006 The University of Sydney, Australia"])

AC_CONFIG_SRCDIR(src/gplates_main.cc)
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_HEADERS(src/global/config.h)

AM_INIT_AUTOMAKE


# Check the canonical build-system type (sets the variable "$build").
AC_CANONICAL_BUILD

# Check the canonical host-system type (sets the variable "$host").
AC_CANONICAL_HOST


##
# C++ compiler and build system.
##

# Setting CXXFLAGS is necessary to circumvent autoconf using its
#  own (namely CXXFLAGS="-g -O2").
#CXXFLAGS=""
AC_PROG_CXX
AC_PROG_MAKE_SET
CHECK_GNU_MAKE
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_LANG(C++)


##
# System-dependent options.
##

# Debugging format; will be appended to "-g", and passed to the compiler
debug_format=""
case "$build" in
	*-*-linux-* )
		debug_format="stabs+"
	;;
	*-*-sunos* | *-*-solaris* )
		debug_format="stabs"
	;;
esac


##
# Required C++ language features.
##

AC_CXX_BOOL
if test "$ac_cv_cxx_bool" != yes; then
	AC_MSG_ERROR([bool is not a built-in type])
fi
AC_CXX_EXCEPTIONS
if test "$ac_cv_cxx_exceptions" != yes; then
	AC_MSG_ERROR([compiler doesn't support exceptions])
fi
AC_CXX_TEMPLATES
if test "$ac_cv_cxx_templates" != yes; then
	AC_MSG_ERROR([compiler doesn't support templates])
fi
AC_CXX_STATIC_CAST
if test "$ac_cv_cxx_static_cast" != yes; then
	AC_MSG_ERROR([compiler doesn't support static_cast])
fi
AC_CXX_DYNAMIC_CAST
if test "$ac_cv_cxx_dynamic_cast" != yes; then
	AC_MSG_ERROR([compiler doesn't support dynamic_cast])
fi
AC_CXX_EXPLICIT
if test "$ac_cv_cxx_explicit" != yes; then
	AC_MSG_ERROR([compiler doesn't support explict keyword])
fi
AC_CXX_MEMBER_CONSTANTS
if test "$ac_cv_cxx_member_constants" != yes; then
	AC_MSG_ERROR([compiler doesn't support constant class members])
fi
AC_CXX_TYPENAME
if test "$ac_cv_cxx_typename" != yes; then
	AC_MSG_ERROR([compiler doesn't support the typename keyword])
fi
AC_CXX_NAMESPACES
if test "$ac_cv_cxx_namespaces" != yes; then
	AC_MSG_ERROR([compiler doesn't implement namespaces])
fi
AC_CXX_HAVE_IEEE_MATH
if test "$ac_cv_cxx_have_ieee_math" != yes; then
	AC_MSG_ERROR([compiler doesn't support IEEE maths library])
fi
AC_CXX_HAVE_SSTREAM
if test "$ac_cv_cxx_have_sstream" != yes; then
	AC_MSG_ERROR([can't find stringstream])
fi
AC_CXX_HAVE_STD
if test "$ac_cv_cxx_have_std" != yes; then
	AC_MSG_ERROR([no ISO C++ standard library present])
fi
AC_CXX_HAVE_STL
if test "$ac_cv_cxx_have_stl" != yes; then
	AC_MSG_ERROR([no C++ STL present])
fi

# We don't *really* need this...
#AC_CXX_RTTI
#if test "$ac_cv_cxx_rtti" != yes; then
#	AC_MSG_ERROR([compiler doesn't support RTTI])
#fi


## 
# Library dependencies.
##

# How we link with OpenGL is dependent upon the type of the host system.
AC_MSG_CHECKING([OpenGL library dependency type])
case "$host" in
	*-apple-darwin* )
		AC_MSG_RESULT([link with Mac OS X OpenGL framework])
		AC_CXX_LINK_OPENGL_FRAMEWORK
		if test "$ac_cv_cxx_can_link_opengl_framework" != yes; then
			AC_MSG_ERROR([[
!!
!!  You don't appear to have the OpenGL framework installed.
!!  It may be obtained from your Apple Developer Tools CD, or from
!!     http://developer.apple.com/tools/
!!]])
		fi
	;;
	* )
		AC_MSG_RESULT([link with GL and GLU])
		AC_CHECK_LIB([GL], [main], [], AC_MSG_ERROR([
!!
!!  You don't appear to have the OpenGL (GL) shared library installed.
!!  It may be obtained from your operating system vendor or your graphics card
!!  vendor (usually on a driver CD or the vendor website).
!!]))
		AC_CHECK_LIB([GLU], [main], [], AC_MSG_ERROR([
!!
!!  You don't appear to have the OpenGL Utility (GLU) shared library installed.
!!  It may be obtained from your operating system vendor or your graphics card
!!  vendor (usually on a driver CD or the vendor website).
!!]))
	;;
esac

# Expat
AC_CHECK_LIB([expat], [main], [], AC_MSG_ERROR([[
!!
!!  You don't appear to have the Expat XML parser shared library installed.
!!  Your operating system vendor may provide a pre-compiled package, or you
!!  can download the source from
!!     http://expat.sourceforge.net
!!]]))

# wxWidgets
# Need to make sure wxGLCanvas is enabled.
# ???

# ICU
# Note that we need to explicitly "test for" every ICU library which is to be
# linked into the executable, so that a linking directive for each is generated
# in the "configure" script.
AC_CHECK_LIB([icui18n], [main], [], AC_MSG_ERROR([[
!!
!!  You don't appear to have the International Components for Unicode (ICU)
!!  "i18n" shared library installed.  Your operating system vendor may provide
!!  a pre-compiled package, or you can download the source from
!!     http://icu.sourceforge.net/
!!]]))
AC_CHECK_LIB([icuio], [main], [], AC_MSG_ERROR([[
!!
!!  You don't appear to have the International Components for Unicode (ICU)
!!  "io" shared library installed.  Your operating system vendor may provide
!!  a pre-compiled package, or you can download the source from
!!     http://icu.sourceforge.net/
!!]]))


##
# Header dependencies.
##

# Boost
# The following macro performs all the necessary checks, including complaining
# to the user if Boost 1.20.0 or later is not found.
AX_BOOST_BASE

# OpenGL and GLU
# How we compile the OpenGL headers dependent upon the type of the build system.
AC_MSG_CHECKING([OpenGL header location])
gl_headers=""
case "$build" in
	*-apple-darwin* )
		AC_MSG_RESULT([Mac OS X OpenGL framework])
		gl_headers="OpenGL/gl.h OpenGL/glu.h"
	;;
	* )
		AC_MSG_RESULT([UNIX-style include directory])
		gl_headers="GL/gl.h GL/glu.h"
	;;
esac
AC_CHECK_HEADERS([$gl_headers], [], AC_MSG_ERROR([
!!
!!  You don't appear to have the OpenGL (GL) development headers
!!  installed.  Your operating system vendor may provide a development
!!  package which includes these headers.
!!]))

# Expat
AC_CHECK_HEADERS([expat.h], [], AC_MSG_ERROR([[
!!
!!  You don't appear to have the Expat XML parser development headers
!!  installed.  Your operating system vendor may provide a development
!!  package which includes these headers, or you can download the source
!!  from
!!     http://expat.sourceforge.net
!!]]))

# ICU
AC_CHECK_HEADERS([unicode/unistr.h], [], AC_MSG_ERROR([[
!!
!!  You don't appear to have the International Components for Unicode (ICU)
!!  development headers installed.  Your operating system vendor may provide
!!  a development package which includes these headers, or you can download
!!  the source from
!!     http://icu.sourceforge.net/
!!]]))


##
# Other software dependencies.
##

# Check for dot (from graphviz package) for doxygen.conf
# WARNING: does not verify this is the _real_ dot program we want
AC_CHECK_PROG([HAVE_DOT], [dot], [YES], [NO])


EXTRA_CFLAGS=""

# Using '--enable-dev' changes compile-time flags to be more strict
turn_on_dev="no"
AC_ARG_ENABLE(dev, [  --enable-dev            Enable developer flags],
[
	turn_on_dev="yes"
	EXTRA_CFLAGS="$EXTRA_CFLAGS -Wall -pedantic -ansi -W -Wshadow -Wcast-align -Wwrite-strings -Wfloat-equal -Wno-unused-parameter -Wctor-dtor-privacy -Wnon-virtual-dtor -Woverloaded-virtual -Wpointer-arith -Werror -g$debug_format"
# This warning breaks wxWidgets: -Wold-style-cast 
])
if test "$turn_on_dev" != "yes"; then
	if test "$package_is_beta" = "yes"; then
		AC_DEFINE([PACKAGE_IS_BETA],[],[Development version])
	fi
fi

# Using '--enable-opt' turns on optimisations
turn_on_opt="no"
AC_ARG_ENABLE(opt, [  --enable-opt            Enable optimisation flags],
[
	turn_on_opt="yes"
	EXTRA_CFLAGS="$EXTRA_CFLAGS -fshort-enums -fstrength-reduce"
])

# Using '--enable-prof' enables profiling flags
turn_on_prof="no"
AC_ARG_ENABLE(prof, [  --enable-prof           Enable profiling],
[
	turn_on_prof="yes"
	EXTRA_CFLAGS="$EXTRA_CFLAGS -g -pg"
	EXTRA_LDFLAGS="-g -pg"
])


AC_MSG_CHECKING([for Plesiosaurs in Loch Ness])
AC_MSG_RESULT(yes)

AM_OPTIONS_WXCONFIG

##################################
# Finding wxWidgets
##################################
probe_wxwid="auto"

AC_ARG_ENABLE(wxwid,
	[  --disable-wxwid         Disable probing for wxWidgets],
	[probe_wxwid=$enableval])


found_wxwid="no"
if test "$probe_wxwid" != "no"; then
	# Check for wxWidgets
	AM_PATH_WXCONFIG([2.4.0], [enable_wxwid="yes"], [enable_wxwid="no"])

	if test "$enable_wxwid" = "yes"; then
		# AM_PATH_WXCONFIG has set up:
		#	- WX_CXXFLAGS
		#	- WX_LIBS
		WX_GL_LIBS=`$WX_CONFIG_WITH_ARGS --gl-libs`

		AC_DEFINE([HAVE_WXWIN],[],[wxWidgets is available.])
		CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
		CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS_ONLY"
		CFLAGS="$CFLAGS $WX_CFLAGS_ONLY"
		LIBS="$LIBS $WX_LIBS $WX_GL_LIBS"
		found_wxwid="yes"
	fi
fi


AC_SUBST(EXTRA_CFLAGS)
AC_SUBST(EXTRA_LDFLAGS)


# Fail if wxWidgets not found
if test "$found_wxwid" = "no"; then
	echo "#########################################################"
	echo "#  ERROR: Could not detect the wxWidgets GUI library!   #"
	echo "#                                                       #"
	echo "#  If you are attempting to build GPlates on Mac OS X   #"
	echo "#  (and you compiled wxWidgets yourself and installed   #"
	echo "#  the library in the default location), you may need   #"
	echo "#  to add the directory                                 #"
	echo "#          /usr/local/bin                               #"
	echo "#  to your PATH environment variable before executing   #"
	echo "#  this 'configure' script again.                       #"
	echo "#########################################################"
	exit 1
fi


# Write output
AC_OUTPUT(Makefile
	doc/doxygen.conf
	doc/Makefile
	src/Makefile
	src/controls/Makefile
	src/fileio/Makefile
	src/geo/Makefile
	src/global/Makefile
	src/gui/Makefile
	src/maths/Makefile
	src/model/Makefile
	src/state/Makefile
	src/util/Makefile)



# Some warnings
if test "$turn_on_dev" = "yes"; then
	echo "###"
	echo "### WARNING: You have enabled Developer flags. Unless you"
	echo "###          are a developer, you are strongly advised to"
	echo "###          leave developer flags turned off, or you may"
	echo "###          have problems compiling GPlates."
	echo "###"
fi
if test "$turn_on_prof" = "yes"; then
	echo "###"
	echo "### WARNING: You have enabled Profiling. Unless you are a"
	echo "###          developer, you are strongly advised to leave"
	echo "###          profiling turned off, or you may have problems"
	echo "###          compiling or running GPlates."
	echo "###"
fi
if test "$turn_on_opt" = "yes" -a "$turn_on_dev" = "yes"; then
	echo "###"
	echo "### WARNING: You have enabled both Optimisation and Development"
	echo "###          flags. This is highly discouraged, as it may cause"
	echo "###          problems compiling or running GPlates."
	echo "###"
fi

echo "###############################################"
echo "#  GPlates is now configured. Simply type...  #"
echo "#          make                               #"
echo "#  ... and GPlates will be compiled.          #"
echo "###############################################"
