/* $Id$ */

/**
 * \file 
 * $Revision$
 * $Date$ 
 * 
 * Copyright (C) 2010 The University of Sydney, Australia
 *
 * This file is part of GPlates.
 *
 * GPlates is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 2, as published by
 * the Free Software Foundation.
 *
 * GPlates is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
#include <QLocale> 

#include "ExportRotationAnimationStrategy.h"

#include "app-logic/ApplicationState.h"
#include "app-logic/FeatureCollectionFileState.h"
#include "app-logic/ReconstructionTreeEdge.h"

#include "gui/ExportAnimationContext.h"
#include "gui/AnimationController.h"
#include "gui/CsvExport.h"

#include "maths/MathsUtils.h"

#include "presentation/ViewState.h"


GPlatesGui::ExportRotationAnimationStrategy::ExportRotationAnimationStrategy(
		GPlatesGui::ExportAnimationContext &export_animation_context,
		const const_configuration_ptr &configuration):
	ExportAnimationStrategy(export_animation_context),
	d_configuration(configuration)
{
	set_template_filename(d_configuration->get_filename_template());
}

bool
GPlatesGui::ExportRotationAnimationStrategy::do_export_iteration(
		std::size_t frame_index)
{	
	GPlatesFileIO::ExportTemplateFilenameSequence::const_iterator &filename_it = 
		*d_filename_iterator_opt;

	GPlatesAppLogic::ApplicationState &application_state =
		d_export_animation_context_ptr->view_state().get_application_state();

	// Export the default rotation tree.
	//
	// Now that layers enables users to have more than one reconstruction tree we need to
	// distinguish which one the user intends to export.
	//
	// FIXME: For now we just use the default reconstruction tree generated by the default
	// reconstruction tree layer.
	// Later we might want to let the user choose.
	GPlatesAppLogic::ReconstructionTree::non_null_ptr_to_const_type reconstruction_tree =
			application_state.get_current_reconstruction()
				.get_default_reconstruction_layer_output()->get_reconstruction_tree();

	std::multimap<GPlatesModel::integer_plate_id_type,
			GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type>::const_iterator it;
	std::multimap<GPlatesModel::integer_plate_id_type,
			GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type>::const_iterator it_begin = 
					reconstruction_tree->edge_map_begin();
	std::multimap<GPlatesModel::integer_plate_id_type,
			GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type>::const_iterator it_end = 
					reconstruction_tree->edge_map_end();

	GPlatesGui::CsvExport::LineDataType data_line;
	std::vector<GPlatesGui::CsvExport::LineDataType> data;

	for(it = it_begin; it != it_end ; ++it)
	{
		// insert the plate id into the first column of the table
		QString plate_id_string;
		QString euler_pole_lat_string;
		QString euler_pole_lon_string;
		QString angle_string;

		plate_id_string.setNum(it->first);
				
	
		const bool is_relative_rotation = (
				(d_configuration->rotation_type == Configuration::RELATIVE_COMMA) ||
				(d_configuration->rotation_type == Configuration::RELATIVE_SEMICOLON) ||
				(d_configuration->rotation_type == Configuration::RELATIVE_TAB) );

		GPlatesMaths::FiniteRotation fr =
				is_relative_rotation
				? it->second->relative_rotation()
				: it->second->composed_absolute_rotation();

		const GPlatesMaths::UnitQuaternion3D &uq = fr.unit_quat();
		
		if (GPlatesMaths::represents_identity_rotation(uq)) 
		{
			euler_pole_lat_string = euler_pole_lon_string = QObject::tr("Indeterminate");
			angle_string.setNum(0.0);
		} 
		else 
		{
			using namespace GPlatesMaths;
			UnitQuaternion3D::RotationParams params = uq.get_rotation_params(fr.axis_hint());

			PointOnSphere euler_pole(params.axis);
			LatLonPoint llp = make_lat_lon_point(euler_pole);

			QLocale locale_;
			euler_pole_lat_string = locale_.toString(llp.latitude());
			euler_pole_lon_string = locale_.toString(llp.longitude());

			angle_string = locale_.toString(
					GPlatesMaths::convert_rad_to_deg(params.angle).dval());
			
		}

		data_line.push_back(plate_id_string);
		data_line.push_back(euler_pole_lat_string);
		data_line.push_back(euler_pole_lon_string);
		data_line.push_back(angle_string);
		
		if (is_relative_rotation)
		{
			GPlatesModel::integer_plate_id_type fixed_id = it->second->fixed_plate();
			QString fixed_plate_id_string;
			fixed_plate_id_string.setNum(fixed_id);

			data_line.push_back(fixed_plate_id_string);
		}
		
		data.push_back(data_line);
		data_line.clear();
	}
	
	CsvExport::ExportOptions option;
	switch(d_configuration->rotation_type)
	{
	case Configuration::RELATIVE_COMMA:
	case Configuration::EQUIVALENT_COMMA:
		option.delimiter = ',';
		break;

	case Configuration::RELATIVE_SEMICOLON:
	case Configuration::EQUIVALENT_SEMICOLON:
		option.delimiter = ';';
		break;

	case Configuration::RELATIVE_TAB:
	case Configuration::EQUIVALENT_TAB:
	default:
		option.delimiter = '\t';
		break;
	}
		
	CsvExport::export_data(
			QDir(d_export_animation_context_ptr->target_dir()).absoluteFilePath(
					*filename_it),
			option,
			data);
	filename_it++;

	// Normal exit, all good, ask the Context process the next iteration please.
	return true;
}
