/* $Id$ */

/**
 * \file 
 * $Revision$
 * $Date$ 
 * 
 * Copyright (C) 2010 The University of Sydney, Australia
 *
 * This file is part of GPlates.
 *
 * GPlates is free software; you can redistribute tree1_edges_iter and/or modify tree1_edges_iter under
 * the terms of the GNU General Public License, version 2, as published by
 * the Free Software Foundation.
 *
 * GPlates is distributed in the hope that tree1_edges_iter will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
#include <iostream>
#include <sstream>
#include <QLocale> 
#include <QDebug>

#include "ExportStageRotationAnimationStrategy.h"

#include "app-logic/ApplicationState.h"
#include "app-logic/FeatureCollectionFileState.h"
#include "app-logic/ReconstructionTreeCreator.h"
#include "app-logic/ReconstructionTreeEdge.h"
#include "app-logic/ReconstructUtils.h"

#include "gui/ExportAnimationContext.h"
#include "gui/AnimationController.h"
#include "gui/CsvExport.h"

#include "maths/MathsUtils.h"

#include "presentation/ViewState.h"


GPlatesGui::ExportStageRotationAnimationStrategy::ExportStageRotationAnimationStrategy(
		GPlatesGui::ExportAnimationContext &export_animation_context,
		const const_configuration_ptr &configuration):
	ExportAnimationStrategy(export_animation_context),
	d_configuration(configuration)
{
	set_template_filename(d_configuration->get_filename_template());
}

bool
GPlatesGui::ExportStageRotationAnimationStrategy::do_export_iteration(
		std::size_t frame_index)
{	
	GPlatesFileIO::ExportTemplateFilenameSequence::const_iterator &filename_it = 
		*d_filename_iterator_opt;

	GPlatesAppLogic::ApplicationState &application_state =
		d_export_animation_context_ptr->view_state().get_application_state();

	// Export the default rotation layer.
	//
	// Now that layers enables users to have more than one reconstruction tree we need to
	// distinguish which one the user intends to export.
	//
	// FIXME: For now we just use the default reconstruction tree generated by the default
	// reconstruction tree layer.
	// Later we might want to let the user choose.
	GPlatesAppLogic::ReconstructionTree::non_null_ptr_to_const_type tree1 =
			application_state.get_current_reconstruction()
				.get_default_reconstruction_layer_output()->get_reconstruction_tree();

	
	std::multimap<GPlatesModel::integer_plate_id_type,
			GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type>::const_iterator tree1_edges_iter;
	std::multimap<GPlatesModel::integer_plate_id_type,
			GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type>::const_iterator tree1_edges_begin = 
			tree1->edge_map_begin();
	std::multimap<GPlatesModel::integer_plate_id_type,
			GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type>::const_iterator tree1_edges_end = 
			tree1->edge_map_end();

	GPlatesGui::CsvExport::LineDataType data_line;
	std::vector<GPlatesGui::CsvExport::LineDataType> data;
	
	GPlatesAppLogic::ReconstructionTree::non_null_ptr_type tree2 =
			GPlatesAppLogic::create_reconstruction_tree(
					tree1->get_reconstruction_time() + 1,
					tree1->get_anchor_plate_id(),
					tree1->get_reconstruction_features());

	for (tree1_edges_iter = tree1_edges_begin; tree1_edges_iter != tree1_edges_end ; ++tree1_edges_iter)
	{
		QString plate_id_string;
		QString axis_x_string, axis_y_string, axis_z_string;
		QString angle_string;

		const bool is_relative_rotation = (
				(d_configuration->rotation_type == Configuration::RELATIVE_COMMA) ||
				(d_configuration->rotation_type == Configuration::RELATIVE_SEMICOLON) ||
				(d_configuration->rotation_type == Configuration::RELATIVE_TAB) );

		const GPlatesAppLogic::ReconstructionTreeEdge::non_null_ptr_type &tree1_edge = tree1_edges_iter->second;

		const GPlatesModel::integer_plate_id_type fixed_plate_id = tree1_edge->fixed_plate();
		const GPlatesModel::integer_plate_id_type moving_plate_id = tree1_edge->moving_plate();

		const GPlatesMaths::UnitQuaternion3D q = is_relative_rotation
				? get_relative_stage_rotation(*tree1, *tree2, moving_plate_id, fixed_plate_id)
				: get_equivalent_stage_rotation(*tree1, *tree2, moving_plate_id);

		if ( represents_identity_rotation( q ) ) 
		{
			axis_x_string = axis_y_string = axis_z_string = angle_string = QObject::tr("Indeterminate");
		}
		else
		{
			// Note we're not using an axis hint here.
			//
			// Since stage rotations are 'differences' between two total rotations at nearby times
			// the resulting stage rotation is not likely to be aligned with either total rotation.
			// Hence the axis hint is not useful - also note that the axis hint chooses between
			// two rotations that are equivalent to each other where one is the antipodal axis of the
			// other (and the negative angle of the other) - but the effective rotation is the same.
			const GPlatesMaths::UnitQuaternion3D::RotationParams params =
					q.get_rotation_params(boost::none);

			std::ostringstream ostr;
			ostr<<params.angle;
			angle_string=ostr.str().c_str();
			ostr.seekp(0);ostr.str("");
			
			ostr<<params.axis.x();
			axis_x_string=ostr.str().c_str();
			ostr.seekp(0);ostr.str("");
			
			ostr<<params.axis.y();
			axis_y_string=ostr.str().c_str();
			ostr.seekp(0);ostr.str("");
			
			ostr<<params.axis.z();
			axis_z_string=ostr.str().c_str();
			ostr.seekp(0);ostr.str("");
		}	
		
		plate_id_string.setNum(tree1_edges_iter->first);
		
		data_line.push_back(plate_id_string);
		data_line.push_back(axis_x_string);
		data_line.push_back(axis_y_string);
		data_line.push_back(axis_z_string);
		data_line.push_back(angle_string);

		if (is_relative_rotation)
		{
			QString fixed_plate_id_string;
			fixed_plate_id_string.setNum(fixed_plate_id);

			data_line.push_back(fixed_plate_id_string);
		}

		data.push_back(data_line);
		data_line.clear();
	}

	CsvExport::ExportOptions option;
	switch(d_configuration->rotation_type)
	{
	case Configuration::RELATIVE_COMMA:
	case Configuration::EQUIVALENT_COMMA:
		option.delimiter = ',';
		break;

	case Configuration::RELATIVE_SEMICOLON:
	case Configuration::EQUIVALENT_SEMICOLON:
		option.delimiter = ';';
		break;

	case Configuration::RELATIVE_TAB:
	case Configuration::EQUIVALENT_TAB:
	default:
		option.delimiter = '\t';
		break;
	}
		
	CsvExport::export_data(
			QDir(d_export_animation_context_ptr->target_dir()).absoluteFilePath(
					*filename_it),
			option,
			data);

	filename_it++;

	// Normal exit, all good, ask the Context process the next iteration please.
	return true;
}


GPlatesMaths::UnitQuaternion3D
GPlatesGui::ExportStageRotationAnimationStrategy::get_relative_stage_rotation(
		const GPlatesAppLogic::ReconstructionTree &tree1,
		const GPlatesAppLogic::ReconstructionTree &tree2,
		GPlatesModel::integer_plate_id_type moving_plate_id,
		GPlatesModel::integer_plate_id_type fixed_plate_id) const
{
	// This rotation represents a rotation from t2 (the older time) to t1 (closer to present day).
	// The rotation is from the fixed plate to the moving plate.
	return GPlatesAppLogic::ReconstructUtils::get_stage_pole(
			tree2,
			tree1,
			moving_plate_id,
			fixed_plate_id).unit_quat();
}


GPlatesMaths::UnitQuaternion3D
GPlatesGui::ExportStageRotationAnimationStrategy::get_equivalent_stage_rotation(
		const GPlatesAppLogic::ReconstructionTree &tree1,
		const GPlatesAppLogic::ReconstructionTree &tree2,
		GPlatesModel::integer_plate_id_type moving_plate_id) const
{
	GPlatesMaths::FiniteRotation fr_t1 = tree1.get_composed_absolute_rotation(moving_plate_id).first;
	GPlatesMaths::FiniteRotation fr_t2 = tree2.get_composed_absolute_rotation(moving_plate_id).first;

	// This quaternion represents a rotation from t2 (the older time) to t1 (closer to present day).
	// The rotation is from the anchor plate to the moving plate.
	//
	// R(t2->t1,A->M)
	//    = R(0->t1,A->M) * R(t2->0,A->M)
	//    = R(0->t1,A->M) * inverse[R(0->t2,A->M)]
	//
	// ...where 'A' is the anchor plate and 'M' is the moving plate.
	//
	return fr_t1.unit_quat() * fr_t2.unit_quat().get_inverse();
}
