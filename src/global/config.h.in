#ifndef GPLATES_GLOBAL_CONFIG_H
#define GPLATES_GLOBAL_CONFIG_H

//
// "src/global/config.h.in":  CMake generates "src/global/config.h"
//


#cmakedefine GPLATES_PUBLIC_RELEASE

/*
 * Whether GPlates compiles in support for profiling CPU usage of source code.
 *
 * Note if the custom build type 'ProfileGplates' has been selected for building then
 * it sets this value directly as a compiler flag (-D), effectively overrriding this.
 * Other build types set it indirectly here via the GPLATES_PROFILE_CODE CMake option
 * that must be manually turned on in the CMake GUI (or via the CMake command-line).
 * 
 * Usually it's easiest to just select the 'ProfileGplates' build type (note that enabling/disabling
 * the option below then has no effect). However, being a custom build type, that sometimes creates problems
 * (eg, the CGAL dependency does not always play nicely with custom build types). In this case you can choose
 * the builtin 'Release' build type (for example) and enable this option via CMake to achieve the same affect.
 */
#cmakedefine GPLATES_PROFILE_CODE

/* Whether GPlates ignores environment variables when initilizing embeded Python interpreter */
#cmakedefine GPLATES_IGNORE_PYTHON_ENVIRONMENT

/* Define to 1 if you have the <gdal/ogrsf_frmts.h> header file. */
#cmakedefine GPLATES_HAVE_GDAL_OGRSF_FRMTS_H

/* Define if have a "gdal_version.h" header file. */
#cmakedefine GPLATES_HAVE_GDAL_VERSION_H
/* Define if have a "gdal_version.h" header file and it's prefixed by "gdal/" */
#cmakedefine GPLATES_HAVE_GDAL_VERSION_H_LOWERCASE_GDAL_PREFIX
/* Define if have a "gdal_version.h" header file and it's prefixed by "GDAL/" */
#cmakedefine GPLATES_HAVE_GDAL_VERSION_H_UPPERCASE_GDAL_PREFIX

/* Define to 1 if you have the <ogrsf_frmts.h> header file. */
#cmakedefine GPLATES_HAVE_OGRSF_FRMTS_H

/* Define to 1 if you have the <proj.h> header file (Proj6). */
#cmakedefine GPLATES_HAVE_PROJ_H
/* Define to 1 if you have the <proj_api.h> header file (Proj4). */
#cmakedefine GPLATES_HAVE_PROJ_API_H

/* The full path to certain system header files */
#cmakedefine BOOST_CSTDINT_HPP_PATH "@BOOST_CSTDINT_HPP_PATH@"

/* Define if have boost.python.numpy (NumPy extension package of Boost.Python). */
#cmakedefine GPLATES_HAVE_BOOST_PYTHON_NUMPY

/* Define if have the numpy C-API headers (such as <numpy/arrayobject.h> located in Python's numpy package). */
#cmakedefine GPLATES_HAVE_NUMPY_C_API

#endif // GPLATES_GLOBAL_CONFIG_H
