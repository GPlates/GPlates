Dependencies For macOS


Table of Contents

 1. Introduction
 2. Program and library dependencies
 3. Corresponding package dependencies
 4. Installing the Vulkan SDK
 5. Installing Qt (and Qwt)
 6. Overview of different ways to install non-system dependencies
 7. Installing non-system dependencies using Macports
    1. A note about Python
    2. A note about GDAL


Introduction
============

This page lists the package dependencies which need to be satisfied to be able
to build GPlates/pyGPlates from source on macOS.


Program and library dependencies
================================

To compile GPlates/pyGPlates, you will need the following programs and libraries installed:

  • XCode (see "BUILD.OSX" for instructions on how to install)
  • cmake (3.10 or newer)
  • make
  • Vulkan SDK (version 1.0 or greater)
  • Python (version 2.7 or 3; preferably 3)
  • Boost library headers (version 1.35 or newer)
  • Qt library (version 5.12 or newer)
  • Qwt (6.0.1 or newer; preferably 6.1 or newer)
  • GDAL (Geospatial Data Abstraction Library) (1.3.2 or newer; preferably 2 or newer)
  • CGAL (Computational Geometry Algorithms Library) (4.7 or newer; preferably 4.12 or newer for improved CMake support)
  • PROJ (4.6.0 or newer; preferably 6 or newer)
  • zlib


Corresponding package dependencies
==================================

Program/library Corresponding Macports packages
cmake           cmake
Python          python3[x] py3[x]-numpy; where 'x' is the minor version
Boost           boost
GDAL            gdal
PROJ            proj
CGAL            cgal5
zlib            zlib


Installing the Vulkan SDK
=========================

The Vulkan LunarG SDK should be installed, instead of the standard Vulkan packages (such as 'vulkan-loader' on Macports),
since the SDK includes extras such as the GLSL shader compiler library (used by GPlates/pyGPlates).

Install the Vulkan SDK from a '.dmg' installer by following these instructions: https://vulkan.lunarg.com/doc/sdk (select the Apple tab).
Note that each version of the SDK supports only the current and last major versions of macOS, and only the latest version of XCode,
at the time the SDK was made available.
So you may need to install an older version SDK. If so, then:
- To find out which SDK version to install, you can visit https://vulkan.lunarg.com/doc/sdk (select the Apple tab) and select
  an older version (directly under the Windows/Linux/Apple tabs) and look at its System Requirements in the inlined documentation.
  Then keep changing the version until the system requirements suit your system. Then you can download/install that version of the SDK.
  For example, on macOS Catalina (10.15) using XCode 12.4 you can install SDK version 1.2.182.0.
To install Vulkan, download the appropriate installer '.dmg' and run the 'InstallVulkan' application contained within it.
- You can choose the destination folder to install into (it will default to your home directory, eg, "~/VulkanSDK/1.3.216.0").
- On newer SDK versions there's an option "System Global Files" that will also copy to "/usr/local" (if selected).
  Note that it's not necessary to select this option.
- Source the "setup-env.sh" script to set needed environment variables - one of these environment variables is VULKAN_SDK
  (which is used by the GPlates/pyGPlates CMake build to find the Vulkan SDK, and can also be used when compiling Qt below).
  For example, "source ~/VulkanSDK/1.3.216.0/setup-env.sh".
  However if you're using Z shell instead of Bash then you can instead run (for example):
    BASH_SOURCE=~/VulkanSDK/1.3.216.0/setup-env.sh emulate zsh -c '. "$BASH_SOURCE"'
  Also you can make it persistent (for future logins) by adding it to your "~/.profile" file (or "~/.zprofile" for Z shell).


Installing Qt (and Qwt)
=======================

To include Vulkan support in Qt on macOS you unfortunately need to compile Qt from source code (after installing Vulkan SDK) which can take hours.
This is needed because pre-compiled binary versions of Qt (eg, from Macports) do not typically support Vulkan (unlike on Windows and Ubuntu).
Also, because Qwt depends on Qt you will also need to compile Qwt from source code (but it's much quicker to compile than Qt).

To compile Qt follow the instructions here:
  * For Qt6: https://doc.qt.io/qt-6/macos-building.html
    Note: Qt6 is perhaps more likely to compile successfully for more recent macOS versions (such as macOS 11 and above).
  * For Qt5: https://doc.qt.io/qt-5/macos-building.html
    Note: Qt5 is perhaps more likely to compile successfully for less recent macOS versions (such as macOS 10.x).
For example:
- Download the Qt source code from http://download.qt.io
  For example, for Qt 6.2.4 download https://download.qt.io/official_releases/qt/6.2/6.2.4/single/qt-everywhere-src-6.2.4.tar.xz
  (or, for Qt 5.15.5 download https://download.qt.io/official_releases/qt/5.15/5.15.5/single/qt-everywhere-opensource-src-5.15.5.tar.xz)
- Extract the source code. For example, "tar xjf qt-everywhere-src-6.2.4.tar.xz" (or "tar xjf qt-everywhere-opensource-src-5.15.5.tar.xz").
- Create a build folder next to it. For example, "mkdir qt-everywhere-src-6.2.4-build" (or "mkdir qt-everywhere-src-5.15.5-build").
  You should now have two folders "qt-everywhere-src-6.2.4" and "qt-everywhere-src-6.2.4-build"
  (or "qt-everywhere-src-5.15.5" and "qt-everywhere-src-5.15.5-build").
- Enter the build folder. For example, "cd qt-everywhere-src-6.2.4-build" (or "cd qt-everywhere-src-5.15.5-build").
- Configure Qt while specifying the path to the MoltenVK headers (in the Vulkan SDK).
  For example, "../qt-everywhere-src-6.2.4/configure -I $VULKAN_SDK/../MoltenVK/include"
  (or "../qt-everywhere-src-5.15.5/configure -I $VULKAN_SDK/../MoltenVK/include").
  Note: This relies on having the VULKAN_SDK environment (covered in the Vulkan SDK section above).
- Check that Vulkan support is enabled.
  The 'configure' output should say "Vulkan Yes" (there's a few pages of output you might need to scroll through to find it).
- Tell Qt where to find the MoltenVK library (in the Vulkan SDK) at runtime by setting the QT_VULKAN_LIB environment variable.
  For example, "export QT_VULKAN_LIB=$VULKAN_SDK/../MoltenVK/dylib/macOS/libMoltenVK.dylib".
  Also you can make it persistent (for future logins) by adding it to your "~/.profile" file (or "~/.zprofile" for Z shell).
- Compile Qt. This differs between Qt5 and Qt6 since the latter uses CMake.
  For Qt6:
    Run "cmake --build . --parallel".
    NOTE: The Qt6 build instructions require you to first install a relatively recent version of CMake (eg, 3.18.4) and Ninja.
          For example, you can intall these via Macports using "port install cmake" and "port install ninja".
  For Qt5:
    Run "make" (or better yet "make -j4").
    NOTE: Compiling Qt takes a LONG time. So it's best to, for example, run "make -j4" on a 4-core CPU (or "make -j8" on an 8-core CPU, etc).
          Even then it can take a number of hours.
- If you get a compile error similar to "out-of-line definition of 'setColorSpace' does not match any declaration in 'QIOSurfaceGraphicsBuffer'"
  then edit "../qt-everywhere-src-5.15.5/qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h" by adding the line
  "#include <CoreGraphics/CGColorSpace.h>" near the other "#include"s at the top of that file and then continue by running "make" again.
- And finally we can install Qt. This differs between Qt5 and Qt6 since the latter uses CMake.
  For Qt6:
    Run "sudo cmake --install .".
  For Qt5:
    Run "sudo make -j1 install".
    Note the "-j1" since we only want to run one make job for the install (to avoid a potential race condition).
- You should now have a Qt installation in "/usr/local/Qt-6.2.4/" (or "/usr/local/Qt-5.15.5/") for example.
- You can optionally add Qt to the PATH environment variable (though it's not necessary for compiling/running GPlates/pyGPlates).
  For example, you can add "export PATH=/usr/local/Qt-6.2.4/bin:$PATH" (or "export PATH=/usr/local/Qt-5.15.5/bin:$PATH")
  to your "~/.profile" (or "~/.zprofile") file.

To compile Qwt follow the instructions here: https://qwt.sourceforge.io/qwtinstall.html
Note: If you compiled Qt6 then compile Qwt 6.2 (instead of 6.1).
For example:
- Download the Qwt source code from https://sourceforge.net/projects/qwt/files/qwt/
  For example, for Qwt 6.2.0 download https://sourceforge.net/projects/qwt/files/qwt/6.2.0/qwt-6.2.0.tar.bz2
- Extract the source code. For example, "tar xjf qwt-6.2.0.tar.bz2".
- Enter the extracted folder. For example, "cd qwt-6.2.0".
- In "qwtconfig.pri", comment out the QWT_INSTALL_PREFIX inside the "unix {...}" block (ie, insert '#').
  This ensures we install Qwt *inside* our Qt installation.
  So we should be left with the line "QWT_INSTALL_PREFX = $$[QT_INSTALL_PREFIX]" (the "win32 {...}" block can be ignored).
- Create the Makefile using our installed Qt.
  For example, "/usr/local/Qt-6.2.4/bin/qmake qwt.pro".
- Compile the source code by running "make" (or "make -j4" on a quad-core CPU).
- Now we need to fix up the install_name of the Qwt library (otherwise the Qwt '.dylib' will fail to load when running GPlates/pyGPlates).
  Edit "src/Makefile" to replace "-install_name qwt.framework/..." with "-install_name /usr/local/Qt-6.2.4/lib/qwt.framework/..." (eg, if using Qt 6.2.4).
  Run "make clean" and then run "make" (or "make -j4") again. Make sure not to skip the "make clean" step.
  Note: We needed to run "make" in the previous step because it generated the "src/Makefile" (whereas "qmake" only generated "Makefile").
- And finally we can install Qwt inside the Qt installation by running "sudo make install".
  Note: You may get an error installing the examples (such as "No rule to make target `animation'") but it seems you can ignore
        this since the "qwt.framework" has already been installed just prior to this error (and that's all we need).
- You should now have a Qwt framework ("qwt.framework") in "/usr/local/Qt-6.2.4/lib/" for example.

Since Qt and Qwt are built from source (and installed in non-system directories) you will need to explicitly specify their location when building GPlates/pyGPlates.
For example, if you installed Qt 6.2.4 (and installed Qwt inside it) then you can build GPlates/pyGPlates by typing (see BUILD.OSX):

    cmake -D CMAKE_PREFIX_PATH:FILEPATH="/usr/local/Qt-6.2.4;/usr/local/Qt-6.2.4/lib" .
    make

...or, for example, for Qt 5.15.5:

    cmake -D CMAKE_PREFIX_PATH:FILEPATH="/usr/local/Qt-5.15.5;/usr/local/Qt-5.15.5/lib" .
    make


Overview of different ways to install non-system dependencies
=============================================================

There are multiple ways to install the remaining dependencies.
You can use Macports (http://www.macports.org) or Homebrew (https://brew.sh/) or Fink (http://www.finkproject.org/).
Or you can compile the dependent packages directly from source code.
Or you can install the dependent packages using precompiled installer packages where available.


Installing non-system dependencies using Macports
=================================================

Here we briefly describe how to install the remaining dependencies using Macports (http://www.macports.org):
  • Install Macports (http://www.macports.org) if it's not already installed (it will ask you to first install XCode).
  • Start a new terminal window (by running Applications->Utilities->Terminal in Finder).
  • You may need to set the path to Macports with "export PATH=/opt/local/bin:/opt/local/sbin:$PATH".
  • Update Macports with 'sudo port -d selfupdate'.
  • Install CMake with 'sudo port install cmake' (or download an installer from http://www.cmake.org ).
  • Install Python with 'sudo port install python3[x]' where 'x' is the minor version (eg, 'sudo port install python310').
    Also install NumPy with 'sudo port install py3[x]-numpy' (eg, 'sudo port install py310-numpy').
  • Install Boost with 'sudo port install boost +python3[x]'.
    Note the additional '+python3[x]' where 'x' is the python minor version number (eg, 'sudo port install boost +python310').
  • Install GDAL with 'sudo port install gdal +netcdf'.
    Note the additional "+netcdf" is required to enable GPlates to import/export NetCDF rasters.
  • Install PROJ with 'sudo port install proj'.
    Note that this will likely already be installed since it's a dependency of gdal (installed above).
  • Install CGAL with 'sudo port install cgal5'.
  • Install zlib with 'sudo port install zlib'.

For example, to install using Python 3.10:

    sudo port -N install cmake python310 py310-numpy boost +python310 gdal +netcdf proj cgal5 zlib

...note the '-N' *prevents* Macports asking you to confirm dependencies for each port.


A note about Python
-------------------

You may need to explicitly specify the Macports Python location. Otherwise the Python framework bundled inside
the XCode app will instead be found by CMake, which likely has a different Python minor version than the Macports Python
you've compiled/activated Macports Boost for, causing CMake to be unable to find boost_python3[x].
For example, if you installed Python 3.10 via Macports (and are running CMake 3.12 or greater) then
build GPlates/pyGPlates by typing (see BUILD.OSX):

    cmake -D Python3_ROOT:PATH=/opt/local/Library/Frameworks/Python.framework/Versions/3.10 .
    make

...or, equivalently, set the environment variable Python3_ROOT and then build GPlates/pyGPlates:

    export Python3_ROOT_DIR:PATH=/opt/local/Library/Frameworks/Python.framework/Versions/3.10
    cmake .
    make


A note about GDAL
-----------------

If you decide to compile GDAL from source (instead of using Macports) then ensure that GDAL links *statically*
to PROJ if the PROJ library is in a non-standard location. This ensures GPlates does not generate a dynamic
library loading error (for PROJ) when a raster with an inbuilt spatial reference system (eg, a projection) is loaded.
This does not appear to be necessary when using GDAL installed via Macports (since it statically links PROJ to GDAL).
You'll also need to ensure that the NetCDF library is installed and that GDAL is configured to use it - this is
necessary for GPlates to be able to load gridded rasters.
Here are the relevant options for the GDAL 2.x 'configure' script (assuming GDAL dependencies have been installed with Macports /opt/local/):

    configure --with-netcdf=/opt/local  --enable-netcdf4 --with-proj=/opt/local --with-threads --disable-static --without-grass --with-libtiff=/opt/local --with-jpeg=/opt/local --with-gif=/opt/local --with-png=/opt/local --with-geotiff=/opt/local --with-sqlite3=/opt/local --with-expat=/opt/local

...where '--enable-netcdf4' enables NetCDF version 4 which may require HDF5 '--with-hdf5=/path/to/hdf5' according to https://trac.osgeo.org/gdal/wiki/NetCDF.
And if using a version of GDAL older than 3.0 then replace '--with-proj=/opt/local ' with '--with-static-proj4=/opt/local'.
